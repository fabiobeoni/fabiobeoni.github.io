{
  "version": 3,
  "sources": [
    "core/js/models/lockingModel.js",
    "core/js/adapt.js",
    "core/js/adaptCollection.js",
    "core/js/startController.js",
    "core/js/models/adaptModel.js",
    "core/js/models/articleModel.js",
    "core/js/models/blockModel.js",
    "core/js/models/configModel.js",
    "core/js/models/contentObjectModel.js",
    "core/js/models/componentModel.js",
    "core/js/models/courseModel.js",
    "core/js/enums/buttonStateEnum.js",
    "core/js/models/questionModel.js",
    "core/js/views/navigationView.js",
    "core/js/views/accessibilityView.js",
    "core/js/accessibility.js",
    "core/js/offlineStorage.js",
    "core/js/enums/logLevelEnum.js",
    "core/js/logging.js",
    "core/js/device.js",
    "core/js/views/drawerView.js",
    "core/js/drawer.js",
    "core/js/views/notifyView.js",
    "core/js/views/notifyPushView.js",
    "core/js/models/notifyModel.js",
    "core/js/notify.js",
    "core/js/popupManager.js",
    "core/js/models/routerModel.js",
    "core/js/views/adaptView.js",
    "core/js/views/blockView.js",
    "core/js/views/articleView.js",
    "core/js/views/pageView.js",
    "core/js/router.js",
    "core/js/helpers.js",
    "core/js/views/componentView.js",
    "components/adapt-contrib-blank/js/adapt-contrib-blank.js",
    "components/adapt-contrib-text/js/adapt-contrib-text.js",
    "components/adaptInteractiveMapPlaces/libraries/Utils.js",
    "components/adaptInteractiveMapPlaces/libraries/MapWrapper.js",
    "components/adaptInteractiveMapPlaces/js/component.js",
    "extensions/adapt-contrib-drawerPageNavigation/js/adapt-contrib-drawerPageNavigationView.js",
    "extensions/adapt-contrib-drawerPageNavigation/js/adapt-contrib-drawerPageNavigation.js",
    "extensions/adapt-contrib-languagePicker/js/accessibilityView.js",
    "extensions/adapt-contrib-languagePicker/js/languagePickerView.js",
    "extensions/adapt-contrib-languagePicker/js/languagePickerDrawerView.js",
    "extensions/adapt-contrib-languagePicker/js/languagePickerNavView.js",
    "extensions/adapt-contrib-languagePicker/js/languagePickerModel.js",
    "extensions/adapt-contrib-languagePicker/js/adapt-languagePicker.js",
    "extensions/adapt-contrib-pageLevelProgress/js/completionCalculations.js",
    "extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView.js",
    "extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView.js",
    "extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView.js",
    "extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress.js",
    "extensions/adapt-contrib-resources/js/adapt-contrib-resourcesView.js",
    "extensions/adapt-contrib-resources/js/adapt-contrib-resourcesHelpers.js",
    "extensions/adapt-contrib-resources/js/adapt-contrib-resources.js",
    "extensions/adapt-notes/js/base64.js",
    "extensions/adapt-notes/js/adapt-notesView.js",
    "extensions/adapt-notes/js/adapt-notes.js",
    "core/js/views/menuView.js",
    "menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu.js",
    "theme/adapt-contrib-vanilla/js/theme-block.js",
    "theme/adapt-contrib-vanilla/js/vanilla.js",
    "plugins.js",
    "core/js/app.js"
  ],
  "names": [],
  "mappingshjxpaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACfvziBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACdhvSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtphIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtznJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACzrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACphJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrzeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnv
  "file": "adapt.min.js",
  "sourcesContent": [
    "define('core/js/models/lockingModel',[],function() {\n\n\tvar set = Backbone.Model.prototype.set;\n\n\t_.extend(Backbone.Model.prototype, {\n\n\t\tset: function(attrName, attrVal, options) {\n\t\t\tvar stopProcessing = !this.lockedAttributes || typeof attrName === \"object\" || typeof attrVal !== \"boolean\" || !this.isLocking(attrName);\n\t\t\tif (stopProcessing) return set.apply(this, arguments);\n\t\t\t\n\t\t\toptions = options || {};\n\n\t\t\tvar isSettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (!isSettingValueForSpecificPlugin) {\n\t\t\t\tconsole.error(\"Must supply a pluginName to change a locked attribute\");\n\t\t\t\toptions.pluginName = \"compatibility\";\n\t\t\t}\n\n\t\t\tvar pluginName  = options.pluginName;\n\t\t\tif (this.defaults[attrName] !== undefined) {\n\t\t\t\tthis.lockedAttributes[attrName] = !this.defaults[attrName];\n\t\t\t}\n\t\t\tvar lockingValue = this.lockedAttributes[attrName];\n\t\t\tvar isAttemptingToLock = (lockingValue === attrVal);\n\n\t\t\tif (isAttemptingToLock) {\n\n\t\t\t\tthis.setLockState(attrName, true, {pluginName:pluginName, skipcheck: true});\n\n\t\t\t\t//console.log(options.pluginName, \"locking\", attrName, \"on\", this.get(\"_id\"));\n\t\t\t\treturn set.call(this, attrName, lockingValue);\n\n\t\t\t}\n\n\t\t\tthis.setLockState(attrName, false, {pluginName:pluginName, skipcheck: true});\n\n\t\t\tvar totalLockValue = this.getLockCount(attrName, {skipcheck: true});\n\t\t\t//console.log(options.pluginName, \"attempting to unlock\", attrName, \"on\", this.get(\"_id\"), \"lockValue\", totalLockValue, this._lockedAttributesValues[attrName]);\n\t\t\tif (totalLockValue === 0) {\n\t\t\t\t//console.log(options.pluginName, \"unlocking\", attrName, \"on\", this.get(\"_id\"));\n\t\t\t\treturn set.call(this, attrName, !lockingValue);\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLocking: function(attrName, defaultLockValue) {\n\t\t\tif (this.isLocking(attrName)) return;\n\t\t\tif (!this.lockedAttributes) this.lockedAttributes = {};\n\t\t\tthis.lockedAttributes[attrName] = defaultLockValue;\n\t\t},\n\n\t\tunsetLocking: function(attrName) {\n\t\t\tif (!this.isLocking(attrName)) return;\n\t\t\tif (!this.lockedAttributes) return;\n\t\t\tdelete this.lockedAttributes[attrName];\n\t\t\tdelete this._lockedAttributesValues[attrName];\n\t\t\tif (_.keys(this.lockedAttributes).length === 0) {\n\t\t\t\tdelete this.lockedAttributes;\n\t\t\t\tdelete this._lockedAttributesValues;\n\t\t\t}\n\t\t},\n\n\t\tisLocking: function(attrName) {\n\t\t\tvar isCheckingGeneralLockingState = (attrName === undefined);\n\t\t\tvar isUsingLockedAttributes = (this.lockedAttributes !== undefined);\n\n\t\t\tif (isCheckingGeneralLockingState) {\n\t\t\t\treturn isUsingLockedAttributes;\n\t\t\t}\n\n\t\t\tif (!isUsingLockedAttributes) return false;\n\n\t\t\tvar isAttributeALockingAttribute = this.lockedAttributes[attrName] !== undefined;\n\t\t\tif (!isAttributeALockingAttribute) return false;\n\n\t\t\tif (this._lockedAttributesValues === undefined) {\n\t\t\t\tthis._lockedAttributesValues = {};\n\t\t\t}\n\n\t\t\tif (this._lockedAttributesValues[attrName] === undefined) {\n\t\t\t\tthis._lockedAttributesValues[attrName] = {};\t\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\tisLocked: function(attrName, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return;\n\t\t\t}\n\n\t\t\treturn this.getLockCount(attrName) > 0;\n\t\t},\n\n\t\tgetLockCount: function(attrName, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return;\n\t\t\t}\n\n\t\t\tvar isGettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (isGettingValueForSpecificPlugin) {\n\n\t\t\t\treturn this._lockedAttributesValues[attrName][options.pluginName] ? 1 : 0;\n\t\t\t}\n\n\t\t\tvar lockingAttributeValues = _.values(this._lockedAttributesValues[attrName]);\n\t\t\tvar lockingAttributeValuesSum = _.reduce(lockingAttributeValues, function(sum, value){ return sum + (value ? 1 : 0); }, 0);\n\t\t\t\n\t\t\treturn lockingAttributeValuesSum;\n\t\t},\n\n\t\tsetLockState: function(attrName, value, options) {\n\t\t\tvar shouldSkipCheck = (options && options.skipcheck);\n\t\t\tif (!shouldSkipCheck) { \n\t\t\t\tvar stopProcessing =  !this.isLocking(attrName);\n\t\t\t\tif (stopProcessing) return this;\n\t\t\t}\n\n\t\t\tvar isSettingValueForSpecificPlugin = options && options.pluginName;\n\t\t\tif (!isSettingValueForSpecificPlugin) {\n\t\t\t\tconsole.error(\"Must supply a pluginName to set a locked attribute lock value\");\n\t\t\t\toptions.pluginName = \"compatibility\";\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tthis._lockedAttributesValues[attrName][options.pluginName] = value;\n\t\t\t} else {\n\t\t\t\tdelete this._lockedAttributesValues[attrName][options.pluginName];\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t});\n\n});\n\n",
    "define('core/js/adapt',[\n    'core/js/models/lockingModel'\n], function(lockingModel) {\n\n    var AdaptModel = Backbone.Model.extend({\n\n        defaults: {\n            _canScroll: true, //to stop scrollTo behaviour,\n            _outstandingCompletionChecks: 0,\n            _pluginWaitCount:0\n        },\n\n        lockedAttributes: {\n            _canScroll: false\n        },\n\n        initialize: function () {\n            this.listenTo(this, 'plugin:beginWait', this.onPluginBeginWait);\n            this.listenTo(this, 'plugin:endWait', this.onPluginEndWait);\n        },\n\n        //call when entering an asynchronous completion check\n        checkingCompletion: function() {\n            var outstandingChecks = this.get(\"_outstandingCompletionChecks\");\n            this.set(\"_outstandingCompletionChecks\", ++outstandingChecks);\n        },\n\n        //call when exiting an asynchronous completion check\n        checkedCompletion: function() {\n            var outstandingChecks = this.get(\"_outstandingCompletionChecks\");\n            this.set(\"_outstandingCompletionChecks\", --outstandingChecks);\n        },\n\n        //wait until there are no outstanding completion checks\n        deferUntilCompletionChecked: function(callback) {\n\n            if (this.get(\"_outstandingCompletionChecks\") === 0) return callback();\n\n            var checkIfAnyChecksOutstanding = function(model, outstandingChecks) {\n                if (outstandingChecks !== 0) return;\n\n                Adapt.off(\"change:_outstandingCompletionChecks\", checkIfAnyChecksOutstanding);\n\n                callback();\n            };\n\n            Adapt.on(\"change:_outstandingCompletionChecks\", checkIfAnyChecksOutstanding);\n\n        },\n\n        isWaitingForPlugins:function() {\n            return this.get('_pluginWaitCount') > 0;\n        },\n\n        checkPluginsReady:function() {\n            if (this.isWaitingForPlugins()) return;\n            this.trigger('plugins:ready');\n        },\n\n        onPluginBeginWait:function() {\n            this.set('_pluginWaitCount', this.get('_pluginWaitCount') + 1);\n            this.checkPluginsReady();\n        },\n\n        onPluginEndWait:function() {\n            this.set('_pluginWaitCount', this.get('_pluginWaitCount') - 1);\n            this.checkPluginsReady();\n        }\n    });\n\n    var Adapt = new AdaptModel();\n\n    Adapt.location = {};\n    Adapt.componentStore = {};\n    Adapt.mappedIds = {};\n\n    Adapt.initialize = _.once(function() {\n\n        //wait until no more completion checking \n        Adapt.deferUntilCompletionChecked(function() {\n\n            //start adapt in a full restored state\n            Adapt.trigger('adapt:start');\n            Backbone.history.start();\n            Adapt.trigger('adapt:initialize');\n\n        });\n\n    });\n\n    Adapt.scrollTo = function(selector, settings) {\n        // Get the current location - this is set in the router\n        var location = (Adapt.location._contentType) ?\n            Adapt.location._contentType : Adapt.location._currentLocation;\n        // Trigger initial scrollTo event\n        Adapt.trigger(location+':scrollTo', selector);\n        //Setup duration variable passed upon arguments\n        var settings = (settings || {});\n        var disableScrollToAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n        if (disableScrollToAnimation) {\n            settings.duration = 0;\n        }\n        else if (!settings.duration) {\n            settings.duration = $.scrollTo.defaults.duration;\n        }\n\n        var offsetTop = -$(\".navigation\").outerHeight();\n        // prevent scroll issue when component description aria-label coincident with top of component\n        if (Adapt.config.get('_accessibility')._isActive &&\n            $(selector).hasClass('component')) {\n            offsetTop -= $(selector).find('.aria-label').height() || 0;\n        }\n\n        if (!settings.offset) settings.offset = { top: offsetTop, left: 0 };\n        if (settings.offset.top === undefined) settings.offset.top = offsetTop;\n        if (settings.offset.left === undefined) settings.offset.left = 0;\n\n        if (settings.offset.left === 0) settings.axis = \"y\";\n\n        if (Adapt.get(\"_canScroll\") !== false) {\n            // Trigger scrollTo plugin\n            $.scrollTo(selector, settings);\n        }\n\n        // Trigger an event after animation\n        // 300 milliseconds added to make sure queue has finished\n        _.delay(function() {\n            $(selector).a11y_focus();\n            Adapt.trigger(location+':scrolledTo', selector);\n        }, settings.duration+300);\n\n    };\n\n    Adapt.navigateToElement = function(selector, settings) {\n        // Allows a selector to be passed in and Adapt will navigate to this element\n\n        // Setup settings object\n        var settings = (settings || {});\n\n        // Removes . symbol from the selector to find the model\n        var currentModelId = selector.replace(/\\./g, '');\n        var currentModel = Adapt.findById(currentModelId);\n        // Get current page to check whether this is the current page\n        var currentPage = (currentModel._siblings === 'contentObjects') ? currentModel : currentModel.findAncestor('contentObjects');\n\n        // If current page - scrollTo element\n        if (currentPage.get('_id') === Adapt.location._currentId) {\n           return Adapt.scrollTo(selector, settings);\n        }\n\n        // If the element is on another page navigate and wait until pageView:ready is fired\n        // Then scrollTo element\n        Adapt.once('pageView:ready', function() {\n            _.defer(function() {\n                Adapt.scrollTo(selector, settings);\n            });\n        });\n\n        var shouldReplaceRoute = settings.replace || false;\n\n        Backbone.history.navigate('#/id/' + currentPage.get('_id'), {trigger: true, replace: shouldReplaceRoute});\n    };\n\n    Adapt.register = function(name, object) {\n        // Used to register components\n        // Store the component view\n        if (Adapt.componentStore[name])\n            throw Error('This component already exists in your project');\n\n        if (object.view) {\n            //use view+model object\n            if(!object.view.template) object.view.template = name;\n        } else {\n            //use view object\n            if(!object.template) object.template = name;\n        }\n        \n        Adapt.componentStore[name] = object;\n\n        return object;\n    };\n\n    // Used to map ids to collections\n    Adapt.setupMapping = function() {\n        // Clear any existing mappings.\n        Adapt.mappedIds = {};\n\n        // Setup course Id\n        Adapt.mappedIds[Adapt.course.get('_id')] = \"course\";\n\n        // Setup each collection\n        var collections = [\"contentObjects\", \"articles\", \"blocks\", \"components\"];\n\n        for (var i = 0, len = collections.length; i < len; i++) {\n            var collection = collections[i];\n            var models = Adapt[collection].models;\n            for (var j = 0, lenj = models.length; j < lenj; j++) {\n                var model = models[j];\n                Adapt.mappedIds[model.get('_id')] = collection;\n\n            }\n        }\n\n    };\n\n    Adapt.mapById = function(id) {\n        // Returns collection name that contains this models Id\n        return Adapt.mappedIds[id];\n    };\n\n    Adapt.findById = function(id) {\n\n        // Return a model\n        // Checks if the Id passed in is the course Id\n        if (id === Adapt.course.get('_id')) {\n            return Adapt.course;\n        }\n\n        var collectionType = Adapt.mapById(id);\n\n        if (!collectionType) {\n            console.warn('Adapt.findById() unable to find collection type for id: ' + id);\n            return;\n        }\n\n        return Adapt[collectionType]._byAdaptID[id][0];\n\n    };\n\n    Adapt.remove = function() {\n        Adapt.trigger('preRemove');\n        Adapt.trigger('remove');\n        _.defer(function() {\n            Adapt.trigger('postRemove');\n        });\n    };\n\n    return Adapt;\n\n});\n\n",
    "define('core/js/adaptCollection',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AdaptCollection = Backbone.Collection.extend({\n        initialize : function(models, options){\n            this.url = options.url;\n\n            this.once('reset', this.loadedData, this);\n            if (this.url) {\n                this.fetch({\n                    reset:true,\n                    error: _.bind(function(model, xhr, options) {\n                        console.error(\"ERROR: unable to load file \" + this.url);\n                    }, this)\n                });\n            }\n        },\n\n        loadedData: function() {\n            Adapt.trigger('adaptCollection:dataLoaded');\n        }\n\n    });\n\n    return AdaptCollection;\n\n});\n\n",
    "define('core/js/startController',[\n    'core/js/adapt'\n], function(Adapt) {\n    \n    var StartController = Backbone.Controller.extend({\n\n        model: null,\n\n        initialize: function() {\n            this.model = new Backbone.Model(Adapt.course.get(\"_start\"));\n        },\n\n        setStartLocation: function() {\n            if (!this.isEnabled()) return;\n\n            var hash = this.getStartHash();\n\n            if ('replaceState' in window.history) {\n                window.history.replaceState('', '', hash);\n            } else {\n                // IE8 does not support window.history.replaceState\n                // This is the best approximation taken from Backbone.Router\n                var href = window.location.href.replace(/(javascript:|#).*$/, '');\n                window.location.replace(href + hash);\n            }\n            \n        },\n\n        getStartHash: function(alwaysForce) {\n            var startId = this.getStartId();\n\n            var hasStartId = (startId)\n                ? true\n                : false;\n\n            var isRouteSpecified = (_.indexOf(window.location.href,\"#\") > -1);\n            var shouldForceStartId = alwaysForce || this.model.get(\"_force\");\n            var shouldNavigateToStartId = hasStartId && (!isRouteSpecified || shouldForceStartId);\n\n            var startHash = \"#/\";\n            if (shouldNavigateToStartId) {\n                if (startId !== Adapt.course.get(\"_id\")) {\n                    startHash = \"#/id/\"+startId;\n                }\n            } else {\n                //go to specified route or course main menu\n                var hasLocationHash = (window.location.hash)\n                    ? true\n                    : false;\n\n                startHash = hasLocationHash ? window.location.hash : startHash;\n            }\n\n            return startHash;\n        },\n\n        isEnabled: function() {\n            if (!this.model || !this.model.get(\"_isEnabled\")) return false;\n            return true;\n        },\n\n        getStartId: function() {\n            var startId = this.model.get(\"_id\");\n            var startIds = this.model.get(\"_startIds\");\n\n            var hasStartIdsConfiguration = (startIds && startIds.length > 0);\n            if (hasStartIdsConfiguration) {\n                for (var i = 0, l =  startIds.length; i < l; i++) {\n                    var item = startIds[i];\n                    var className =  item._className;\n                    var skipIfComplete = item._skipIfComplete;\n                    \n                    var model = Adapt.findById(item._id);\n                    \n                    if (!model) {\n                        console.log(\"startController: cannot find id\", item._id);\n                        continue;\n                    }\n                    \n                    if (skipIfComplete) {\n                        if (model.get(\"_isComplete\")) continue;\n                    }\n\n                    if (!className || $(\"html\").is(className)) {\n                        startId = item._id;\n                        break;\n                    }\n                }\n            }\n\n            return startId;\n        }\n\n    });\n\n    Adapt.once(\"adapt:start\", function() {\n        var startController = new StartController();\n        startController.setStartLocation();\n    });\n\n    return StartController;\n\n});\n\n",
    "define('core/js/models/adaptModel',[\n    'core/js/adapt'\n], function (Adapt) {\n\n    var AdaptModel = Backbone.Model.extend({\n\n        defaults: {\n            _canShowFeedback: true,\n            _classes: \"\",\n            _canReset: false,\n            _isComplete: false,\n            _isInteractionComplete: false,\n            _requireCompletionOf: -1,\n            _isEnabled: true,\n            _isResetOnRevisit: false,\n            _isAvailable: true,\n            _isOptional: false,\n            _isReady: false,\n            _isVisible: true,\n            _isLocked: false\n        },\n\n        initialize: function () {\n            // Wait until data is loaded before setting up model\n            this.listenToOnce(Adapt, 'app:dataLoaded', this.setupModel);\n\n        },\n\n        setupModel: function() {\n            if (this.get('_type') === 'page') {\n                this._children = 'articles';\n            }\n            if (this._siblings === 'contentObjects' && this.get('_parentId') !== Adapt.course.get('_id')) {\n                this._parent = 'contentObjects';\n            }\n            if (this._children) {\n                //if parent is optional, apply to children\n                if (this.get('_isOptional')) this.setOptional(true);\n\n                this.setupChildListeners();\n            }\n\n            this.init();\n            \n            _.defer(_.bind(function() {\n                if (this._children) {\n                    this.checkCompletionStatus();\n                    \n                    this.checkInteractionCompletionStatus();\n                    \n                    this.checkLocking();\n                }\n            }, this));\n        },\n\n        setupChildListeners: function() {\n            var children = this.getChildren();\n\n            if (!children) return;\n\n            children.each(function(child) {\n                this.listenTo(child, {\n                    \"change:_isReady\": this.checkReadyStatus,\n                    \"change:_isComplete\": this.onIsComplete,\n                    \"change:_isInteractionComplete\": this.checkInteractionCompletionStatus\n                });\n            }, this);\n        },\n\n        init: function() {},\n\n        reset: function(type, force) {\n            if (!this.get(\"_canReset\") && !force) return;\n\n            type = type || true;\n\n            switch (type) {\n            case \"hard\": case true:\n                this.set({\n                    _isEnabled: true,\n                    _isComplete: false,\n                    _isInteractionComplete: false\n                });\n                break;\n            case \"soft\":\n                this.set({\n                    _isEnabled: true,\n                    _isInteractionComplete: false\n                });\n                break;\n            }\n        },\n\n        checkReadyStatus: function () {\n            // Filter children based upon whether they are available\n            // Check if any return _isReady:false\n            // If not - set this model to _isReady: true\n            if (this.getAvailableChildren().findWhere({_isReady: false})) return;\n            this.set({_isReady: true});\n        },\n\n        setCompletionStatus: function() {\n            if (this.get('_isVisible')) {\n                this.set('_isComplete', true);\n                this.set('_isInteractionComplete', true);\n            }\n        },\n\n        checkCompletionStatus: function () {\n            //defer to allow other change:_isComplete handlers to fire before cascasing to parent\n            Adapt.checkingCompletion();\n            _.defer(_.bind(function() {\n                var isComplete = false;\n                \n                //number of mandatory children that must be complete or -1 for all\n                var requireCompletionOf = this.get(\"_requireCompletionOf\");\n                \n                if (requireCompletionOf === -1) {\n                    // Check if any return _isComplete:false\n                    // If not - set this model to _isComplete: true\n                    isComplete = (this.getAvailableChildren().findWhere({_isComplete: false, _isOptional: false}) === undefined);\n                } else {\n                    isComplete = (this.getAvailableChildren().where({_isComplete: true, _isOptional: false}).length >= requireCompletionOf );\n                }\n    \n                this.set({_isComplete: isComplete});\n                \n                Adapt.checkedCompletion();\n            }, this));\n        },\n\n        checkInteractionCompletionStatus: function () {\n            //defer to allow other change:_isInteractionComplete handlers to fire before cascasing to parent\n            Adapt.checkingCompletion();\n            _.defer(_.bind(function() {\n                var isInteractionComplete = false;\n                \n                //number of mandatory children that must be complete or -1 for all\n                var requireCompletionOf = this.get(\"_requireCompletionOf\");\n                \n                if (requireCompletionOf === -1) {\n                    // Check if any return _isInteractionComplete:false\n                    // If not - set this model to _isInteractionComplete: true\n                    isInteractionComplete = (this.getAvailableChildren().findWhere({_isInteractionComplete: false, _isOptional: false}) === undefined);\n                } else {\n                    isInteractionComplete = (this.getAvailableChildren().where({_isInteractionComplete: true, _isOptional: false}).length >= requireCompletionOf);\n                }\n    \n                this.set({_isInteractionComplete:isInteractionComplete});\n                Adapt.checkedCompletion();\n\n            }, this));\n        },\n\n        findAncestor: function (ancestors) {\n\n            var parent = this.getParent();\n\n            if (this._parent === ancestors) {\n                return parent;\n            }\n\n            var returnedAncestor = parent.getParent();\n\n            if (parent._parent !== ancestors) {\n                returnedAncestor = returnedAncestor.getParent();\n            }\n\n            // Returns a single model\n            return returnedAncestor;\n\n        },\n\n        findDescendants: function (descendants) {\n\n            // first check if descendant is child and return child\n            if (this._children === descendants) {\n                return this.getChildren();\n            }\n\n            var allDescendants = [];\n            var flattenedDescendants;\n            var children = this.getChildren();\n            var returnedDescedants;\n\n            function searchChildren(children) {\n                var models = children.models;\n                for (var i = 0, len = models.length; i < len; i++) {\n                    var model = models[i];\n                    var childrensModels = model.getChildren().models;\n                    allDescendants.push(childrensModels);\n                    flattenedDescendants = _.flatten(allDescendants);\n                }\n\n                returnedDescedants = new Backbone.Collection(flattenedDescendants);\n\n                if (children.models.length === 0 || children.models[0]._children === descendants) {\n                    return;\n                } else {\n                    allDescendants = [];\n                    searchChildren(returnedDescedants);\n                }\n            }\n\n            searchChildren(children);\n\n            // returns a collection of children\n            return returnedDescedants;\n        },\n\n        getChildren: function () {\n            if (this.get(\"_children\")) return this.get(\"_children\");\n\n            var childrenCollection;\n\n            if (!this._children) {\n                childrenCollection = new Backbone.Collection();\n            } else {\n                var children = Adapt[this._children].where({_parentId: this.get(\"_id\")});\n                childrenCollection = new Backbone.Collection(children);\n            }\n\n            if (this.get('_type') == 'block' && childrenCollection.length == 2\n                && childrenCollection.models[0].get('_layout') !== 'left' && this.get('_sortComponents') !== false) {\n                // Components may have a 'left' or 'right' _layout,\n                // so ensure they appear in the correct order\n                // Re-order component models to correct it\n                childrenCollection.comparator = '_layout';\n                childrenCollection.sort();\n            }\n\n            this.set(\"_children\", childrenCollection);\n\n            // returns a collection of children\n            return childrenCollection;\n        },\n\n        getAvailableChildren: function() {\n            return new Backbone.Collection(this.getChildren().where({\n                _isAvailable: true\n            }));\n        },\n\n        getParent: function () {\n            if (this.get(\"_parent\")) return this.get(\"_parent\");\n            if (this._parent === \"course\") {\n                return Adapt.course;\n            }\n            var parent = Adapt.findById(this.get(\"_parentId\"));\n            this.set(\"_parent\", parent);\n\n            // returns a parent model\n            return parent;\n        },\n\n        getParents: function(shouldIncludeChild) {\n            var parents = [];\n            var context = this;\n            \n            if (shouldIncludeChild) parents.push(context);\n            \n            while (context.has(\"_parentId\")) {\n                context = context.getParent();\n                parents.push(context);\n            }\n            \n            return parents.length ? new Backbone.Collection(parents) : null;\n        },\n\n        getSiblings: function (passSiblingsAndIncludeSelf) {\n            var siblings;\n            if (!passSiblingsAndIncludeSelf) {\n                // returns a collection of siblings excluding self\n                if (this._hasSiblingsAndSelf === false) {\n                    return this.get(\"_siblings\");\n                }\n                siblings = _.reject(Adapt[this._siblings].where({\n                    _parentId: this.get(\"_parentId\")\n                }), _.bind(function (model) {\n                    return model.get('_id') == this.get('_id');\n                }, this));\n\n                this._hasSiblingsAndSelf = false;\n\n            } else {\n                // returns a collection of siblings including self\n                if (this._hasSiblingsAndSelf) {\n                    return this.get(\"_siblings\");\n                }\n\n                siblings = Adapt[this._siblings].where({\n                    _parentId: this.get(\"_parentId\")\n                });\n                this._hasSiblingsAndSelf = true;\n            }\n\n            var siblingsCollection = new Backbone.Collection(siblings);\n            this.set(\"_siblings\", siblingsCollection);\n            return siblingsCollection;\n        },\n\n        setOnChildren: function (key, value, options) {\n\n            var args = arguments;\n\n            this.set.apply(this, args);\n\n            if (!this._children) return;\n\n            var children = this.getChildren();\n            var models = children.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var child = models[i];\n                child.setOnChildren.apply(child, args);\n            }\n\n        },\n\n        setOptional: function(value) {\n            this.set({_isOptional: value});\n        },\n\n        checkLocking: function() {\n            var lockType = this.get(\"_lockType\");\n\n            if (!lockType) return;\n\n            switch (lockType) {\n                case \"sequential\":\n                    this.setSequentialLocking();\n                    break;\n                case \"unlockFirst\":\n                    this.setUnlockFirstLocking();\n                    break;\n                case \"lockLast\":\n                    this.setLockLastLocking();\n                    break;\n                case \"custom\":\n                    this.setCustomLocking();\n                    break;\n                default:\n                    console.warn(\"AdaptModel.checkLocking: unknown _lockType \\\"\" +\n                        lockType + \"\\\" found on \" + this.get(\"_id\"));\n            }\n        },\n\n        setSequentialLocking: function() {\n            var children = this.getAvailableChildren().models;\n\n            for (var i = 1, j = children.length; i < j; i++) {\n                children[i].set(\"_isLocked\", !children[i - 1].get(\"_isComplete\"));\n            }\n        },\n\n        setUnlockFirstLocking: function() {\n            var children = this.getAvailableChildren().models;\n            var isFirstChildComplete = children[0].get(\"_isComplete\");\n\n            for (var i = 1, j = children.length; i < j; i++) {\n                children[i].set(\"_isLocked\", !isFirstChildComplete);\n            }\n        },\n\n        setLockLastLocking: function() {\n            var children = this.getAvailableChildren().models;\n            var lastIndex = children.length - 1;\n\n            for (var i = lastIndex - 1; i >= 0; i--) {\n                if (!children[i].get(\"_isComplete\")) {\n                    return children[lastIndex].set(\"_isLocked\", true);\n                }\n            }\n\n            children[lastIndex].set(\"_isLocked\", false);\n        },\n\n        setCustomLocking: function() {\n            var children = this.getAvailableChildren().models;\n\n            for (var i = 0, j = children.length; i < j; i++) {\n                var child = children[i];\n\n                child.set(\"_isLocked\", this.shouldLock(child));\n            }\n        },\n\n        shouldLock: function(child) {\n            var lockedBy = child.get(\"_lockedBy\");\n\n            if (!lockedBy) return false;\n\n            for (var i = lockedBy.length - 1; i >= 0; i--) {\n                var id = lockedBy[i];\n\n                try {\n                    var model = Adapt.findById(id);\n\n                    if (!model.get(\"_isAvailable\")) continue;\n                    if (!model.get(\"_isComplete\")) return true;\n                }\n                catch (e) {\n                    console.warn(\"AdaptModel.shouldLock: unknown _lockedBy ID \\\"\" + id +\n                        \"\\\" found on \" + child.get(\"_id\"));\n                }\n            }\n\n            return false;\n        },\n        \n        onIsComplete: function() {\n            this.checkCompletionStatus();\n            \n            this.checkLocking();\n        }\n\n    });\n\n    return AdaptModel;\n\n});\n",
    "define('core/js/models/articleModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ArticleModel = AdaptModel.extend({\n        _parent:'contentObjects',\n    \t_siblings:'articles',\n        _children: 'blocks'\n    });\n\n    return ArticleModel;\n\n});\n\n",
    "define('core/js/models/blockModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\t\n    var BlockModel = AdaptModel.extend({\n        _parent:'articles',\n    \t_siblings:'blocks',\n        _children: 'components',\n        \n        defaults: function() {\n            return _.extend({\n                _sortComponents: true\n            }, AdaptModel.prototype.defaults);\n        }\n    });\n\n    return BlockModel;\n\n});\n\n",
    "define('core/js/models/configModel',[\n    'core/js/adapt'\n], function (Adapt) {\n\n    var ConfigModel = Backbone.Model.extend({\n\n        defaults: {\n            screenSize : {\n                small: 520,\n                medium: 760,\n                large: 1024\n            },\n            _forceRouteLocking: false,\n            _canLoadData: true,\n            _disableAnimation: false\n        },\n\n        initialize: function(attrs, options) {\n            this.url = options.url;\n            // Fetch data & if successful trigger event to enable plugins to stop course files loading\n            // Then check if course files can load\n            // 'configModel:loadCourseData' event starts the core content collections and models being fetched\n            this.fetch({\n                success: _.bind(function() {\n                    Adapt.trigger('configModel:dataLoaded');\n                    if (this.get('_canLoadData')) {\n                        Adapt.trigger('configModel:loadCourseData');\n                    }\n                    if(this.get('_defaultDirection')=='rtl'){//We're going to use rtl style\n                    \t$('html').addClass('dir-rtl');\n                    }\n                    // check if animations should be disabled\n                    var disableAnimationArray = this.get('_disableAnimationFor');\n                    if (disableAnimationArray && disableAnimationArray.length > 0) {\n                        for (var i=0; i < disableAnimationArray.length; i++) {\n                            if ($(\"html\").is(disableAnimationArray[i])) {\n                                this.set('_disableAnimation', true);\n                                console.log('Animation disabled.');\n                            }\n                        }\n                    }\n                }, this),\n                error: function() {\n                    console.log('Unable to load course/config.json');\n                }\n            });\n        },\n\n        loadData: function() {\n\n        }\n\n    });\n\n   return ConfigModel;\n\n});\n\n",
    "define('core/js/models/contentObjectModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ContentObjectModel = AdaptModel.extend({\n    \t_parent:'course',\n    \t_siblings:'contentObjects',\n        _children: 'contentObjects'\n    });\n\n    return ContentObjectModel;\n});\n\n",
    "define('core/js/models/componentModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var ComponentModel = AdaptModel.extend({\n        _parent:'blocks',\n    \t_siblings:'components'\n    });\n\n    return ComponentModel;\n\n});\n\n",
    "define('core/js/models/courseModel',[\n    'core/js/adapt',\n    'core/js/models/adaptModel'\n], function (Adapt, AdaptModel) {\n\n    var CourseModel = AdaptModel.extend({\n\n        initialize: function(attrs, options) {\n            AdaptModel.prototype.initialize.apply(this, arguments);\n            Adapt.trigger('courseModel:dataLoading');\n\n            this.url = options.url;\n\n            this.on('sync', this.loadedData, this);\n            if (this.url) {\n                this.fetch({\n                    error: _.bind(function(model, xhr, options) {\n                        console.error(\"ERROR: unable to load file \" + this.url);\n                    }, this)\n                });\n            }\n        },\n\n        loadedData: function() {\n            Adapt.trigger('courseModel:dataLoaded');\n        },\n\n        _children: \"contentObjects\"\n\n    });\n\n    return CourseModel;\n\n});\n\n",
    "define('core/js/enums/buttonStateEnum',[],function() {\n\n    var BUTTON_STATE = ENUM([\n        'SUBMIT',\n        'CORRECT',\n        'INCORRECT',\n        'SHOW_CORRECT_ANSWER',\n        'HIDE_CORRECT_ANSWER',\n        'SHOW_FEEDBACK',\n        'RESET'\n    ]);\n\n    return BUTTON_STATE;\n\n});\n",
    "define('core/js/models/questionModel',[\n    'core/js/adapt',\n    'core/js/models/componentModel',\n    'core/js/enums/buttonStateEnum'\n], function(Adapt, ComponentModel, BUTTON_STATE) {\n\n    var QuestionModel = ComponentModel.extend({\n\n        //////\n        // Setup question types\n        ////\n\n        // Used to set model defaults\n        defaults: function() {\n            // Extend from the ComponentModel defaults\n            return _.extend({\n                '_isQuestionType': true,\n                '_shouldDisplayAttempts': false,\n                '_canShowModelAnswer': true,\n                '_canShowFeedback': true,\n                '_canShowMarking': true,\n                '_questionWeight': Adapt.config.get(\"_questionWeight\"),\n            }, ComponentModel.prototype.defaults);\n        },\n\n        init: function() {\n            this.setupDefaultSettings();\n            this.listenToOnce(Adapt, \"adapt:initialize\", this.onAdaptInitialize);\n        },\n\n        // Calls default methods to setup on questions\n        setupDefaultSettings: function() {\n            // Not sure this is needed anymore, keeping to maintain API\n            this.setupWeightSettings();\n            this.setupButtonSettings();\n        },\n\n        // Used to setup either global or local button text\n        setupButtonSettings: function() {\n            var globalButtons = Adapt.course.get(\"_buttons\");\n\n            // Checks if local _buttons exists and if not use global\n            if (!this.has(\"_buttons\")) {\n                this.set(\"_buttons\", globalButtons);\n            } else {\n                // check all the components buttons\n                // if they are empty use the global default\n                var componentButtons = this.get(\"_buttons\");\n\n                if (typeof componentButtons.submit == 'undefined') {\n                    for (var key in componentButtons) {\n                        if (typeof componentButtons[key] == 'object') {\n                          // ARIA labels\n                          if (!componentButtons[key].buttonText && globalButtons[key].buttonText) {\n                            componentButtons[key].buttonText = globalButtons[key].buttonText;\n                          }\n\n                          if (!componentButtons[key].ariaLabel && globalButtons[key].ariaLabel) {\n                            componentButtons[key].ariaLabel = globalButtons[key].ariaLabel;\n                          }\n                        }\n\n                        if (!componentButtons[key] && globalButtons[key]) {\n                            componentButtons[key] = globalButtons[key];\n                        }\n                    }\n                } else {\n                    // Backwards compatibility with v1.x\n                    var buttons = [];\n\n                    for (var key in componentButtons) {\n                        var index = '_' + key;\n\n                        if (!componentButtons[key]) {\n                            buttons[index] = globalButtons[index];\n                        } else {\n                            buttons[index] = {\n                                buttonText: componentButtons[key],\n                                ariaLabel: componentButtons[key]\n                            };\n                        }\n                    }\n\n                    // HACK - Append other missing values\n                    buttons['_showFeedback'] = {\n                        buttonText: 'Show feedback',\n                        ariaLabel: 'Show feedback'\n                    };\n\n                    this.set('_buttons', buttons);\n                }\n            }\n        },\n\n        // Used to setup either global or local question weight/score\n        setupWeightSettings: function() {\n            // Not needed as handled by model defaults, keeping to maintain API\n        },\n\n        //////\n        // Selection restoration process\n        ////\n\n\n        // Used to add post-load changes to the model\n        onAdaptInitialize: function() {\n            this.restoreUserAnswers();\n        },\n\n        // Used to restore the user answers \n        restoreUserAnswers: function() {},\n\n        \n        //////\n        // Submit process\n        ////\n\n        // Use to check if the user is allowed to submit the question\n        // Maybe the user has to select an item?\n        canSubmit: function() {},\n\n        // Used to update the amount of attempts the user has left\n        updateAttempts: function() {\n            if (!this.get('_attemptsLeft')) {\n                this.set(\"_attemptsLeft\", this.get('_attempts'));\n            }\n            this.set(\"_attemptsLeft\", this.get('_attemptsLeft') - 1);\n        },\n\n        // Used to set _isEnabled and _isSubmitted on the model\n        setQuestionAsSubmitted: function() {\n            this.set({\n                _isEnabled: false,\n                _isSubmitted: true\n            });\n        },\n\n        // This is important for returning or showing the users answer\n        // This should preserve the state of the users answers\n        storeUserAnswer: function() {},\n\n        // Sets _isCorrect:true/false based upon isCorrect method below\n        markQuestion: function() {\n\n            if (this.isCorrect()) {\n                this.set('_isCorrect', true);\n            } else {\n                this.set('_isCorrect', false);\n            }\n\n        },\n\n         // Should return a boolean based upon whether to question is correct or not\n        isCorrect: function() {},\n\n        // Used to set the score based upon the _questionWeight\n        setScore: function() {},\n\n        // Checks if the question should be set to complete\n        // Calls setCompletionStatus and adds complete classes\n        checkQuestionCompletion: function() {\n\n            var isComplete = (this.get('_isCorrect') || this.get('_attemptsLeft') === 0);\n\n            if (isComplete) {\n                this.setCompletionStatus();\n            }\n\n            return isComplete;\n\n        },\n\n        // Updates buttons based upon question state by setting\n        // _buttonState on the model which buttonsView listens to\n        updateButtons: function() {\n\n            var isInteractionComplete = this.get('_isInteractionComplete');\n            var isCorrect = this.get('_isCorrect');\n            var isEnabled = this.get('_isEnabled');\n            var buttonState = this.get('_buttonState');\n            var canShowModelAnswer = this.get('_canShowModelAnswer');\n\n            if (isInteractionComplete) {\n\n                if (isCorrect || !canShowModelAnswer) {\n                    // Use correct instead of complete to signify button state\n                    this.set('_buttonState', BUTTON_STATE.CORRECT);\n\n                } else {\n\n                    switch (buttonState) {\n                        case BUTTON_STATE.SUBMIT:\n                        case BUTTON_STATE.HIDE_CORRECT_ANSWER:\n                            this.set('_buttonState', BUTTON_STATE.SHOW_CORRECT_ANSWER);\n                            break;\n                        default:\n                            this.set('_buttonState', BUTTON_STATE.HIDE_CORRECT_ANSWER);\n                    }\n\n                }\n\n            } else {\n\n                if (isEnabled) {\n                    this.set('_buttonState', BUTTON_STATE.SUBMIT);\n                } else {\n                    this.set('_buttonState', BUTTON_STATE.RESET);\n                }\n            }\n\n        },\n\n        // Used to setup the correct, incorrect and partly correct feedback\n        setupFeedback: function() {\n\n            if (this.get('_isCorrect')) {\n                this.setupCorrectFeedback();\n            } else if (this.isPartlyCorrect()) {\n                this.setupPartlyCorrectFeedback();\n            } else {\n                this.setupIncorrectFeedback();\n            }\n\n        },\n\n        // Used by the question to determine if the question is incorrect or partly correct\n        // Should return a boolean\n        isPartlyCorrect: function() {},\n\n        setupCorrectFeedback: function() {\n\n            this.set({\n                feedbackTitle: this.get('title'),\n                feedbackMessage: this.get(\"_feedback\") ? this.get(\"_feedback\").correct : \"\"\n            });\n\n        },\n\n        setupPartlyCorrectFeedback: function() {\n\n            if (this.get(\"_feedback\") && this.get('_feedback')._partlyCorrect) {\n                if (this.get('_attemptsLeft') === 0 || !this.get('_feedback')._partlyCorrect.notFinal) {\n                    if (this.get('_feedback')._partlyCorrect.final) {\n                        this.set({\n                            feedbackTitle: this.get('title'),\n                            feedbackMessage: this.get(\"_feedback\") ? this.get('_feedback')._partlyCorrect.final : \"\"\n                        });\n                    } else {\n                        this.setupIncorrectFeedback();\n                    }\n                } else {\n                    this.set({\n                        feedbackTitle: this.get('title'),\n                        feedbackMessage: this.get(\"_feedback\") ? this.get('_feedback')._partlyCorrect.notFinal : \"\"\n                    });\n                }\n            } else {\n                this.setupIncorrectFeedback();\n            }\n\n        },\n\n        setupIncorrectFeedback: function() {\n\n            if (this.get('_attemptsLeft') === 0 || this.get('_feedback') && !this.get('_feedback')._incorrect.notFinal) {\n                this.set({\n                    feedbackTitle: this.get('title'),\n                    feedbackMessage: this.get(\"_feedback\") ? this.get('_feedback')._incorrect.final : \"\"\n                });\n            } else {\n                this.set({\n                    feedbackTitle: this.get('title'),\n                    feedbackMessage: this.get(\"_feedback\") ? this.get('_feedback')._incorrect.notFinal : \"\"\n                });\n            }\n\n        },\n\n        // Reset the model to let the user have another go (not the same as attempts)\n        reset: function(type, force) {\n            if (!this.get(\"_canReset\") && !force) return;\n\n            type = type || true; //hard reset by default, can be \"soft\", \"hard\"/true\n\n            ComponentModel.prototype.reset.call(this, type, force);\n\n            var attempts = this.get('_attempts');\n            this.set({\n                _attemptsLeft: attempts,\n                _isCorrect: undefined,\n                _isSubmitted: false,\n                _buttonState: BUTTON_STATE.SUBMIT\n            });\n        },\n\n        // Reset question for subsequent attempts\n        setQuestionAsReset: function() {\n            this.set({\n                _isEnabled: true,\n                _isSubmitted: false\n            });\n        },\n\n        // Used by the question view to reset the stored user answer\n        resetUserAnswer: function() {},\n        \n        refresh: function() {\n            this.trigger('question:refresh');\n        },\n\n        getButtonState: function() {\n            if (this.get('_isCorrect')) {\n                return BUTTON_STATE.CORRECT;\n            }\n\n            if (this.get('_attemptsLeft') === 0) {\n                 return this.get('_canShowModelAnswer') ? BUTTON_STATE.SHOW_CORRECT_ANSWER : BUTTON_STATE.INCORRECT;\n            }\n\n            return this.get('_isSubmitted') ? BUTTON_STATE.RESET : BUTTON_STATE.SUBMIT;\n        }\n\n    });\n\n    return QuestionModel;\n\n});\n",
    "define('core/js/views/navigationView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var NavigationView = Backbone.View.extend({\n\n        className: \"navigation\",\n\n        initialize: function() {\n            this.listenToOnce(Adapt, 'courseModel:dataLoading', this.remove);\n            this.listenTo(Adapt, 'router:menu router:page', this.hideNavigationButton);\n            this.template = \"navigation\";\n            this.preRender();\n        },\n\n        events: {\n            'click [data-event]':'triggerEvent'\n        },\n\n        preRender: function() {\n            Adapt.trigger('navigationView:preRender', this);\n            this.render();\n        },\n\n        render: function() {\n            var template = Handlebars.templates[this.template];\n            this.$el.html(template(\n                {\n                    _globals: Adapt.course.get(\"_globals\"),\n                    _accessibility: Adapt.config.get(\"_accessibility\")\n                }\n            )).insertBefore('#wrapper');\n\n            _.defer(_.bind(function() {\n                Adapt.trigger('navigationView:postRender', this);\n            }, this));\n            return this;\n        },\n\n        triggerEvent: function(event) {\n            event.preventDefault();\n            var currentEvent = $(event.currentTarget).attr('data-event');\n            Adapt.trigger('navigation:' + currentEvent);\n        },\n\n        hideNavigationButton: function(model) {\n            if (model.get('_type') === \"course\") {\n                $('.navigation-back-button, .navigation-home-button').addClass('display-none');\n            } else {\n                this.showNavigationButton();\n            }\n        },\n\n        showNavigationButton: function() {\n            $('.navigation-back-button, .navigation-home-button').removeClass('display-none');\n        }\n\n    });\n\n    return NavigationView;\n\n});\n\n",
    "define('core/js/views/accessibilityView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AccessibilityView = Backbone.View.extend({\n\n        el: '#accessibility-toggle',\n\n        initialize: function() {\n            this.render();\n        },\n\n        events: {\n            'click' : 'toggleAccessibility'\n        },\n\n        render: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled;\n\n            if (!hasAccessibility) {\n                return;\n            } else {\n                var isActive = Adapt.config.get('_accessibility')._isActive;\n                var offLabel = Adapt.course.get('_globals') && (Adapt.course.get('_globals')._accessibility.accessibilityToggleTextOff || Adapt.course.get('_globals')._accessibility._accessibilityToggleTextOff);\n                var onLabel = Adapt.course.get('_globals') && (Adapt.course.get('_globals')._accessibility.accessibilityToggleTextOn || Adapt.course.get('_globals')._accessibility._accessibilityToggleTextOn);\n\n                var toggleText = isActive ? offLabel : onLabel;\n\n                this.$el.html(toggleText).attr('aria-label', Adapt.course.get(\"title\") + \". \"\n                    + Adapt.course.get('_globals')._accessibility._ariaLabels.accessibilityToggleButton + \". \"\n                    + $.a11y_normalize(toggleText));\n            }\n        },\n\n        toggleAccessibility: function(event) {\n            event.preventDefault();\n\n            var hasAccessibility = Adapt.config.get('_accessibility')._isActive;\n\n            var toggleAccessibility = (hasAccessibility) ? false : true;\n\n            Adapt.config.get('_accessibility')._isActive = toggleAccessibility;\n\n            Adapt.trigger('accessibility:toggle');\n\n            this.render();\n\n            Backbone.history.navigate(window.location.hash || \"#/\", {trigger: true});\n        }\n\n    });\n\n    return AccessibilityView;\n\n});\n\n",
    "define('core/js/accessibility',[\n    'core/js/adapt',\n    'core/js/views/accessibilityView',\n    'a11y'\n], function(Adapt, AccessibilityView) {\n\n    var Accessibility = Backbone.Controller.extend({\n\n        $html: $('html'),\n        $accessibilityInstructions: $(\"#accessibility-instructions\"),\n        $accessibilityToggle: $(\"#accessibility-toggle\"),\n\n        _tabIndexElements: 'a, button, input, select, textarea, [tabindex]',\n        _isButtonRedirectionOn: true,\n        _hasUserTabbed: false,\n        _hasUsageInstructionRead: false,\n        _isLoaded: false,\n        _hasCourseLoaded: false,\n        _legacyFocusElements: undefined,\n\n        reset: function() {\n            _.extend(this, {\n                _isButtonRedirectionOn: true,\n                _hasUserTabbed: false,\n                _hasUsageInstructionRead: false\n            });\n        },\n\n        initialize: function() {\n            //RUN ONCE\n            if (this._isLoaded) return;\n\n            //TRIGGER SETUP ON DATA LOADED AND TOGGLE BUTTON\n            Adapt.once('app:dataLoaded', function() {\n                //check if accessibility mode should be restored\n                this._hasCourseLoaded = true;\n                Adapt.config.get(\"_accessibility\")._isActive = Adapt.offlineStorage.get(\"a11y\") || false;\n                this.setupAccessibility();\n\n            }, this);\n\n            Adapt.on('accessibility:toggle', this.setupAccessibility, this);\n\n            //SETUP RENDERING HELPERS\n            Adapt.once('app:dataLoaded', this.setupHelpers, this);\n            Adapt.once('app:dataLoaded', this.touchDeviceCheck, this);\n\n            //SETUP NEW VIEW FOR TOGGLE BUTTON\n            Adapt.once('app:dataReady', this.setupToggleButton, this);\n\n            //SETUP NO SELECT PARAMETERS ON DEVICE CHANGE\n            Adapt.on(\"device:changed\", this.setupNoSelect);\n\n            //Configure the accessibility library\n            this.listenToOnce(Adapt, \"app:dataReady\", this.configureA11yLibrary);\n\n            //CAPTURE ROUTING/NEW DOCUMENT LOADING START AND END\n            this.listenTo(Adapt, 'router:location', this.onNavigationStart);\n            this.listenTo(Adapt, 'pageView:ready menuView:ready router:plugin', this.onNavigationEnd);\n        },\n\n        setupAccessibility: function() {\n            //CALLED ON BUTTON CLICK AND ON DATA LOAD\n            if (!this.isEnabled()) return;\n\n            if (this._hasCourseLoaded && !Modernizr.touch) {\n                //save accessibility state\n                Adapt.offlineStorage.set(\"a11y\", Adapt.config.get(\"_accessibility\")._isActive);\n            }\n\n            this.reset();\n\n            this.checkTabCapture();\n\n            this.configureA11yLibrary();\n\n            this.touchDeviceCheck();\n\n            // Check if accessibility is active\n            if (this.isActive()) {\n                this.setupDocument();\n                this.setupLegacy();\n                this.setupPopupListeners();\n                this.setupUsageInstructions();\n                this.setupLogging();\n\n            } else {\n\n                this.revertDocument();\n                this.revertLegacy();\n                this.revertPopupListeners();\n                this.revertUsageInstructions();\n                this.revertLogging();\n\n            }\n\n        },\n\n        setupHelpers: function() {\n\n            //MAKE $.a11y_text and $.a11y_normalize IN GLOBAL HANDLEBARS HELPERS a11y_text and a11y_normalize\n            var config = Adapt.config.has('_accessibility')\n                ? Adapt.config.get(\"_accessibility\")\n                : false;\n\n            Handlebars.registerHelper('a11y_text', function(text) {\n                //ALLOW ENABLE/DISABLE OF a11y_text HELPER\n                if (config && config._isTextProcessorEnabled === false) {\n                    return text;\n                } else {\n                    return $.a11y_text(text);\n                }\n            });\n\n            Handlebars.registerHelper('a11y_normalize', function(text) {\n                return $.a11y_normalize(text);\n            });\n\n            Handlebars.registerHelper('a11y_aria_label', function(text) {\n                return '<div class=\"aria-label prevent-default\" tabindex=\"0\" role=\"region\">'+text+'</div>';\n            });\n\n            Handlebars.registerHelper('a11y_aria_label_relative', function(text) {\n                return '<div class=\"aria-label relative prevent-default\" tabindex=\"0\" role=\"region\">'+text+'</div>';\n            });\n\n            Handlebars.registerHelper('a11y_wrap_focus', function(text) {\n                return '<a id=\"a11y-focusguard\" class=\"a11y-ignore a11y-ignore-focus\" tabindex=\"0\" role=\"button\">&nbsp;</a>';\n            });\n\n            Handlebars.registerHelper('a11y_attrs_heading', function(level) {\n                return ' role=\"heading\" aria-level=\"'+level+'\" tabindex=\"0\" ';\n            });\n\n            Handlebars.registerHelper('a11y_attrs_tabbable', function() {\n                return ' role=\"region\" tabindex=\"0\" ';\n            });\n\n        },\n\n        setupToggleButton: function() {\n            if (this.isEnabled()) {\n                new AccessibilityView();\n            } else {\n                this.$accessibilityToggle.addClass(\"a11y-ignore\").a11y_cntrl_enabled(false);\n            }\n        },\n\n        setupNoSelect: function() {\n            if (!Adapt.config.get('_accessibility') || !Adapt.config.get('_accessibility')._disableTextSelectOnClasses) return;\n\n            var classes = Adapt.config.get('_accessibility')._disableTextSelectOnClasses.split(\" \");\n\n            var isMatch = false;\n            for (var i = 0, item; item = classes[i++];) {\n                if ($('html').is(item)) {\n                    isMatch = true;\n                    break;\n                }\n            }\n\n            if (isMatch) {\n                $('html').addClass(\"no-select\");\n            } else  {\n                $('html').removeClass(\"no-select\");\n            }\n\n        },\n\n        configureA11yLibrary: function() {\n\n            var topOffset = $('.navigation').height();\n            var bottomoffset = 0;\n            $.a11y.options.focusOffsetTop = topOffset;\n            $.a11y.options.focusOffsetBottom = bottomoffset;\n            $.a11y.options.OS = Adapt.device.OS.toLowerCase();\n            $.a11y.options.isTouchDevice = Modernizr.touch;\n\n            if (this.isActive()) {\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: true,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: true,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: true,\n                    isAlertsEnabled: true\n                });\n            } else {\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: false,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: false,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: false,\n                    isAlertsEnabled: false\n                });\n            }\n\n            this.setupNoSelect();\n\n            $.a11y.ready();\n\n            if (!this.isEnabled()) return;\n\n            //CAPTURE TAB PRESSES TO DIVERT\n            $('body').off('keyup', this.onKeyUp);\n            $('body').on('keyup', this.onKeyUp);\n        },\n\n        onNavigationStart: function() {\n            this._isLoaded = false;\n            this._hasUserTabbed = false;\n            //STOP DOCUMENT READING, MOVE FOCUS TO APPROPRIATE LOCATION\n            $(\"#a11y-focuser\").a11y_focus(true);\n            _.defer(function() {\n                $.a11y_on(false, '.page');\n                $.a11y_on(false, '.menu');\n            });\n        },\n\n        onNavigationEnd: function(view) {\n            //prevent sub-menu items provoking behaviour\n            if (view && view.model) {\n                if (view.model.get(\"_id\") != Adapt.location._currentId) return;\n            }\n\n            //always use detached aria labels for divs and spans\n            _.defer(function() {\n                $('body').a11y_aria_label(true);\n            });\n\n            this._isLoaded = true;\n\n            $.a11y_on(false, '.page');\n            $.a11y_on(false, '.menu');\n\n            this.configureA11yLibrary();\n            $.a11y_update();\n            this.setNavigationBar();\n\n            //MAKE FOCUS RIGHT\n            this._isButtonRedirectionOn = true;\n            _.delay(_.bind(function() {\n                this.focusInitial();\n            }, this), 500);\n\n        },\n\n        setNavigationBar: function() {\n            if (this.isActive()) {\n                $(\".navigation .aria-label\").attr(\"tabindex\", 0).removeAttr(\"aria-hidden\").removeClass(\"a11y-ignore\");\n            } else {\n                $(\".navigation .aria-label\").attr(\"tabindex\", -1).attr(\"aria-hidden\", \"true\");\n            }\n        },\n\n        touchDeviceCheck: function() {\n            //SCREEN READER DON@T USE TABBING\n            //FORCE ACCESSIBILITY ON TO RENDER NECESSARY STUFFS FOR TOUCH DEVICE SCREENREADERS\n            if (!this.isEnabled()) return;\n\n            if (Modernizr.touch) {\n                 //Remove button\n                this.$accessibilityToggle.remove();\n            }\n            \n            var config = Adapt.config.get(\"_accessibility\");\n            // Backwards compatibility for _isDisabledOnTouchDevices\n            var isEnabledOnTouchDevices = config._isEnabledOnTouchDevices || (config._isDisabledOnTouchDevices === false);\n            \n            if (!Modernizr.touch || this.isActive() || !isEnabledOnTouchDevices) return;\n\n            //If a touch device and not enabled, remove accessibility button and turn on accessibility\n\n            this._isLoaded = true;\n\n            //Force accessibility on\n            Adapt.config.get('_accessibility')._isEnabled = true;\n            Adapt.config.get('_accessibility')._isActive = true;\n\n            Adapt.trigger('accessibility:toggle', true);\n\n        },\n\n        checkTabCapture: function() {\n            if (!this._isLoaded) return;\n\n            var isActive = this.isActive();\n\n            $.a11y(isActive);\n\n            //IF ACCESSIBILTY TURNED ON QUIT\n            if (isActive) return;\n\n            //OTHERWISE ENABLE TAB REDIRECTION TO TOGGLE BUTTON\n            this._isButtonRedirectionOn = true;\n        },\n\n        isActive: function() {\n            return Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled\n                && Adapt.config.get('_accessibility')._isActive;\n        },\n\n        isEnabled: function() {\n            return Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled;\n        },\n\n        setupDocument: function() {\n            this.$html.addClass('accessibility');\n\n            if (Adapt.config.get('_accessibility')._isTextProcessorEnabled) {\n                this.$html.addClass('text-to-speech');\n            }\n\n            $('.skip-nav-link').removeClass('a11y-ignore a11y-ignore-focus');\n\n            $.a11y(true)\n            $.a11y_on(true, \"body > *\");\n        },\n\n        setupLegacy: function() {\n            //IE8 .focused CLASS AS :focus ISN'T AVAILABLE\n\n            if(!this.$html.hasClass('ie8') || !Adapt.config.get('_accessibility')._shouldSupportLegacyBrowsers) return;\n\n            // If legacy enabled run setupLegacyListeners()\n            this.listenTo(Adapt, 'pageView:ready menuView:ready', this.setupLegacyFocusClasser);\n            this.listenTo(Adapt, 'remove', this.removeLegacyFocusClasser);\n\n        },\n\n        setupLegacyFocusClasser: function() {\n            this.removeLegacyFocusClasser();\n\n            // On focus add class of focused, on blur remove class\n            this._legacyFocusElements = $(this._tabIndexElements);\n            this._legacyFocusElements\n                .on('focus', this.onElementFocused)\n                .on('blur', this.onElementBlurred);\n        },\n\n        setupPopupListeners: function() {\n            this.listenTo(Adapt, 'popup:opened popup:closed', this.onPop);\n        },\n\n\n        setupUsageInstructions: function() {\n            if (!Adapt.course.get(\"_globals\")._accessibility || !Adapt.course.get(\"_globals\")._accessibility._accessibilityInstructions) {\n                this.$accessibilityInstructions.remove();\n                return;\n            }\n\n            var instructionsList = Adapt.course.get(\"_globals\")._accessibility._accessibilityInstructions;\n\n            var usageInstructions;\n            if (instructionsList[Adapt.device.browser]) {\n                usageInstructions = instructionsList[Adapt.device.browser];\n            } else if (Modernizr.touch) {\n                usageInstructions = instructionsList.touch || \"\";\n            } else {\n                usageInstructions = instructionsList.notouch || \"\";\n            }\n\n           this.$accessibilityInstructions.html( usageInstructions );\n        },\n\n        setupLogging: function() {\n            if (!Adapt.config.get(\"_accessibility\") || !Adapt.config.get(\"_accessibility\")._logReading) return;\n\n            $(document).on(\"reading\", this.onRead);\n        },\n\n\n\n        revertDocument: function() {\n            this.$html.removeClass('accessibility text-to-speech');\n            $('.skip-nav-link').addClass('a11y-ignore a11y-ignore-focus');\n            $.a11y(false);\n            $.a11y_on(false, \"body > *\");\n            $.a11y_on(true, \"#accessibility-toggle\");\n        },\n\n        revertLegacy: function() {\n\n            if(!this.$html.hasClass('ie8') || !Adapt.config.get('_accessibility')._shouldSupportLegacyBrowsers) return;\n\n            this.stopListening(Adapt, 'pageView:ready menuView:ready', this.setupLegacyFocusClasser);\n            this.stopListening(Adapt, 'remove', this.removeLegacyFocusClasser);\n\n        },\n\n        removeLegacyFocusClasser: function() {\n            if (this._legacyFocusElements === undefined) return;\n\n            //Remove focus and blur events\n            this._legacyFocusElements\n                .off('focus', this.onElementFocused)\n                .off('blur', this.onElementBlurred);\n            this._legacyFocusElements = undefined;\n        },\n\n\n        revertPopupListeners: function() {\n            this.stopListening(Adapt, 'popup:opened popup:closed', this.onPop);\n        },\n\n        revertUsageInstructions: function() {\n            if (Adapt.course.has(\"_globals\") && (!Adapt.course.get(\"_globals\")._accessibility || !Adapt.course.get(\"_globals\")._accessibility._accessibilityInstructions)) return;\n\n            this.$accessibilityInstructions.off(\"blur\", this.onFocusInstructions);\n        },\n\n        revertLogging: function() {\n            if (Adapt.course.has(\"_globals\") && (!Adapt.course.get(\"_globals\")._accessibility || !Adapt.course.get(\"_globals\")._accessibility._logReading)) return;\n\n            $($.a11y).off(\"reading\", this.onRead);\n        },\n\n\n        focusInitial: function() {\n            if (!this.isActive()) return;\n\n            this._isButtonRedirectionOn = false;\n\n            var debouncedInitial = _.debounce(_.bind(function() {\n                //ENABLED DOCUMENT READING\n\n                if (!this._hasUsageInstructionRead) {\n\n                    this._hasUsageInstructionRead = true;\n\n                    $.a11y_on(true, '.page');\n                    $.a11y_on(true, '.menu');\n\n                    if (this._hasUserTabbed) return;\n\n                    this.$accessibilityInstructions.one(\"blur\", this.onFocusInstructions);\n\n                    _.delay(function(){\n                        Adapt.accessibility.$accessibilityInstructions.focusNoScroll();\n                    }, 250);\n\n                } else {\n\n                    if (Adapt.location._currentId && $.a11y.options.OS!=\"mac\") {\n                        //required to stop JAWS from auto reading content in IE\n                        var currentModel = Adapt.findById(Adapt.location._currentId);\n                        var alertText = \" \";\n\n                        switch (currentModel.get(\"_type\")) {\n                            case \"page\":\n                            if (Adapt.course.get(\"_globals\") && Adapt.course.get(\"_globals\")._accessibility && Adapt.course.get(\"_globals\")._accessibility._ariaLabels && Adapt.course.get(\"_globals\")._accessibility._ariaLabels.pageLoaded) {\n                                    alertText = Adapt.course.get(\"_globals\")._accessibility._ariaLabels.pageLoaded;\n                                }\n                                break;\n\n                            case \"menu\":\n                            default:\n                            if (Adapt.course.get(\"_globals\") && Adapt.course.get(\"_globals\")._accessibility && Adapt.course.get(\"_globals\")._accessibility._ariaLabels && Adapt.course.get(\"_globals\")._accessibility._ariaLabels.menuLoaded) {\n                                    alertText = Adapt.course.get(\"_globals\")._accessibility._ariaLabels.menuLoaded;\n                                }\n                                break;\n                        }\n\n                        $.a11y_alert(alertText);\n                    }\n\n                     _.delay(_.bind(function() {\n                        var windowScrollTop = $(window).scrollTop();\n                        var documentScrollTop = $(document).scrollTop();\n\n                        $.a11y_on(true, '.page');\n                        $.a11y_on(true, '.menu');\n\n                        //prevent auto scrolling to top when scroll has been initiated\n                        if (windowScrollTop > 0 || documentScrollTop > 0 || this._hasUserTabbed) return;\n\n                        _.delay(function(){\n                        $.a11y_focus();\n                        }, 500);\n\n                    }, this), 500);\n\n                }\n\n            }, this), 100);\n            debouncedInitial();\n\n        },\n\n        onElementFocused: function(event) {\n             $(this).addClass('focused');\n        },\n\n        onElementBlurred: function(event) {\n            $(this).removeClass('focused');\n        },\n\n        onRead: function(event, text) {\n            //OUTPUT READ TEXT TO CONSOLE\n            console.log(\"READING: \" + text);\n        },\n\n        onPop: function() {\n            //MAKE SURE POPUP IS CONFIGURED CORRECTLY WITH ARIA LABELS, TABINDEXES ETC\n            if (this.isActive()) {\n                $.a11y_update();\n            }\n        },\n\n        onKeyUp: function(event) {\n\n            //IF NOT TAB KEY, RETURN\n            if (event.which !== 9) return;\n\n            //DO NOT REDIRECT IF USER HAS ALREADY INTERACTED\n            if ($.a11y.userInteracted) return;\n            Adapt.accessibility._hasUserTabbed = true;\n\n            //IF INITIAL TAB NOT CAPTURED AND ACCESSIBILITY NOT ON, RETURN\n            if (Adapt.accessibility.isActive() && !Adapt.accessibility._isButtonRedirectionOn) return;\n\n            //IF TAB PRESSED, AND TAB REDIRECTION ON, ALWAYS TAB TO ACCESSIBILITY BUTTON ONLY\n            Adapt.accessibility.$accessibilityToggle.focus();\n\n        },\n\n        onFocusInstructions: function(event) {\n            //HIDE INSTRUCTIONS FROM TAB WRAP AROUND AFTER LEAVING INSTRUCTIONS\n            if (Adapt.accessibility._isButtonRedirectionOn) return;\n            if (!Adapt.accessibility._isLoaded) return;\n            Adapt.accessibility.$accessibilityInstructions\n                .addClass(\"a11y-ignore-focus\")\n                .off(\"blur\", Adapt.accessibility.onFocusInstructions);\n        }\n\n    });\n\n    Adapt.accessibility = new Accessibility();\n\n    return Adapt.accessibility;\n\n});\n\n",
    "define('core/js/offlineStorage',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    //Basic API for setting and getting name+value pairs\n    //Allows registration of a single handler.\n\n    var OfflineStorage = Backbone.Controller.extend({\n\n        /**\n         * set to true initially so that if there are no offlineStorage handlers (i.e. if contrib-spoor is not installed)\n         * this can still be accessed OK\n         */\n        ready: true,\n        _handler: undefined,\n\n        /**\n         * set .ready to false if an offlineStorage handler is being attached - we'll need to wait until the handler lets us know\n         * it's ready before we can safely use offlineStorage\n         */\n        initialize: function(handler) {\n            if (!handler) {\n                return;\n            }\n\n            this.ready = false;\n            this._handler = handler;\n        },\n\n        set: function(name, value) {\n            if (!(this._handler && this._handler.set)) return;\n            return this._handler.set.apply(this._handler, arguments);\n        },\n\n        get: function(name) {\n            if (!(this._handler && this._handler.get)) return;\n            return this._handler.get.apply(this._handler, arguments);\n        },\n\n        /**\n         * Some forms of offlineStorage could take time to initialise, this allows us to let plugins know when it's ready to be used\n         */\n        setReadyStatus: function() {\n            this.ready = true;\n            Adapt.trigger(\"offlineStorage:ready\");\n        }\n\n    });\n\n    Adapt.offlineStorage = new OfflineStorage();\n\n    return Adapt.offlineStorage;\n\n});\n\n",
    "define('core/js/enums/logLevelEnum',[],function() {\n\n    // Used to determine if log call should be printed based on log level\n    var LOG_LEVEL = ENUM([\n        \"DEBUG\",\n        \"INFO\",\n        \"WARN\",\n        \"ERROR\",\n        \"FATAL\"\n    ]);\n\n    return LOG_LEVEL;\n\n});\n",
    "define('core/js/logging',[\n    'core/js/adapt',\n    'core/js/enums/logLevelEnum'\n], function(Adapt, LOG_LEVEL) {\n\n    var Logging = Backbone.Controller.extend({\n\n        _config: {\n            _isEnabled: true,\n            _level: LOG_LEVEL.INFO.asLowerCase, // Default log level\n            _console: true, // Log to console\n        },      \n        \n        initialize: function() {\n\n            Adapt.once('configModel:loadCourseData', this.onLoadCourseData.bind(this));\n\n        },\n        \n        onLoadCourseData: function() {\n\n            this.loadConfig();\n\n            this.debug('Logging config loaded');\n\n            this.trigger('log:ready');\n\n        },\n\n        loadConfig: function() {\n\n            if (Adapt.config.has('_logging')) {\n                this._config = Adapt.config.get('_logging');\n            }\n\n            this.checkQueryStringOverride();\n\n        },\n\n        checkQueryStringOverride: function() {\n\n            // Override default log level with level present in query string\n            var matches = window.location.search.match(/[?&]loglevel=([a-z]*)/i);\n            if (!matches || matches.length < 2) return;\n\n            var override = LOG_LEVEL(matches[1].toUpperCase());\n            if (!override) return;\n\n            this._config._level = override.asLowerCase;\n            this.debug('Loglevel override in query string:', this._config._level);\n            \n        },\n        \n        debug: function() {            \n            this._log(LOG_LEVEL.DEBUG, Array.prototype.slice.call(arguments));\n        },\n        \n        info: function() {\n            this._log(LOG_LEVEL.INFO, Array.prototype.slice.call(arguments));\n        },\n        \n        warn: function() {\n            this._log(LOG_LEVEL.WARN, Array.prototype.slice.call(arguments));\n        },\n        \n        error: function() {\n            this._log(LOG_LEVEL.ERROR, Array.prototype.slice.call(arguments));\n        },\n        \n        fatal: function() {\n            this._log(LOG_LEVEL.FATAL, Array.prototype.slice.call(arguments));\n        },\n        \n        _log: function(level, data) {\n\n            var isEnabled = (this._config._isEnabled);\n            if (!isEnabled) return;\n\n            var configLevel = LOG_LEVEL(this._config._level.toUpperCase());\n\n            var isLogLevelAllowed = (level >= configLevel);\n            if (!isLogLevelAllowed) return;\n\n            this._logToConsole(level, data);\n\n            // Allow error reporting plugins to hook and report to logging systems\n            this.trigger('log', level, data);\n            this.trigger('log:' + level.asLowerCase, level, data);\n\n        },\n\n        _logToConsole: function(level, data) {\n\n            var shouldLogToConsole = (this._config._console);\n            if (!shouldLogToConsole) return;\n\n            var log = [level.asUpperCase + ':'];\n            data && log.push.apply(log, data);\n\n            console.log.apply(console, log);\n\n        }\n\n    });\n\n    Adapt.log = new Logging();\n});\n\n",
    "define('core/js/device',[\n    'core/js/adapt',\n    'bowser'\n], function(Adapt, Bowser) {\n\n    var $html = $('html');\n    var $window = $(window);\n\n    Adapt.device = {\n        touch: Modernizr.touch,\n        screenWidth: getScreenWidth(),\n        screenHeight: getScreenHeight(),\n        browser: (Bowser.name || '').toLowerCase(),\n        version: (Bowser.version || '').toLowerCase(),\n        OS: getOperatingSystem().toLowerCase(),\n        osVersion: Bowser.osversion || '',\n        renderingEngine: getRenderingEngine()\n    };\n\n    // Define 'orientation' and 'aspectRatio' here once 'screenWidth' and 'screenHeight' have been set,\n    // as both these functions are getters, essentially.\n    Object.defineProperties(Adapt.device, {\n        \"orientation\": {\n            get: function () {\n                return (this.screenWidth >= this.screenHeight) ? 'landscape' : 'portrait';\n            }\n        },\n        \"aspectRatio\": {\n            get: function () {\n                return this.screenWidth / this.screenHeight;\n            }\n        }\n    });\n\n    Adapt.once('app:dataReady', function() {\n        Adapt.device.screenSize = checkScreenSize();\n\n        $html.addClass('size-' + Adapt.device.screenSize);\n        \n        if (Adapt.device.orientation) {\n            $html.addClass('orientation-' + Adapt.device.orientation);\n        }\n\n        // As Adapt.config is available it's ok to bind the 'resize'.\n        $window.on('resize orientationchange', onWindowResize);\n    });\n\n    /**\n     * Compares the calculated screen width to the breakpoints defined in config.json.\n     * \n     * @returns {string} 'large', 'medium' or 'small'\n     */\n    function checkScreenSize() {\n        var screenSizeConfig = Adapt.config.get('screenSize');\n        var screenSize;\n\n        if (Adapt.device.screenWidth > screenSizeConfig.medium) {\n            screenSize = 'large';\n        } else if (Adapt.device.screenWidth > screenSizeConfig.small) {\n            screenSize = 'medium';\n        } else {\n            screenSize = 'small';\n        }\n\n        return screenSize;\n    }\n\n    function getScreenWidth() {\n        return isAppleDevice()\n            ? getAppleScreenWidth()\n            : window.innerWidth || $window.width();\n    }\n\n    function getScreenHeight() {\n        return isAppleDevice()\n            ? getAppleScreenHeight()\n            : window.innerHeight || $window.height();\n    }\n\n    function getOperatingSystem() {\n        var os = '';\n        var flags = ['windows', 'mac', 'linux', 'windowsphone', 'chromeos', 'android',\n            'ios', 'blackberry', 'firefoxos', 'webos', 'bada', 'tizen', 'sailfish'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                os = flags[i];\n                break;\n            }\n        }\n\n        if (os === '') {\n            // Fall back to using navigator.platform in case Bowser can't detect the OS.\n            var platform = navigator.platform;\n            var platforms = ['Win', 'Mac', 'Linux'];\n            os = 'PlatformUnknown';\n\n            for (var i = 0; i < platforms.length; i++) {\n                if (platform.indexOf(platforms[i]) != -1) {\n                    os = platforms[i].toLowerCase();\n                    break;\n                }\n            }\n\n            // Set consistency with the Bowser flags.\n            if (os == 'win') {\n                os = 'windows';\n            }\n        }\n\n        return os;\n    }\n\n    function getRenderingEngine() {\n        var engine = '';\n        var flags = ['webkit', 'blink', 'gecko', 'msie', 'msedge'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                engine = flags[i];\n                break;\n            }\n        }\n\n        return engine;\n    }\n\n    var onWindowResize = _.debounce(function onScreenSizeChanged() {\n        // Calculate the screen properties.\n        var previousWidth = Adapt.device.screenWidth;\n        var previousHeight = Adapt.device.screenHeight;\n\n        Adapt.device.screenWidth = getScreenWidth();\n        Adapt.device.screenHeight = getScreenHeight();\n\n        if (previousWidth === Adapt.device.screenWidth && previousHeight === Adapt.device.screenHeight) {\n            // Do not trigger a change if the viewport hasn't actually changed.  Scrolling on iOS will trigger a resize.\n            return;\n        }\n\n        var newScreenSize = checkScreenSize();\n\n        if (newScreenSize !== Adapt.device.screenSize) {\n            Adapt.device.screenSize = newScreenSize;\n\n            $html.removeClass('size-small size-medium size-large').addClass('size-' + Adapt.device.screenSize);\n\n            if (Adapt.device.orientation) {\n                $html.removeClass('orientation-landscape orientation-portrait').addClass('orientation-' + Adapt.device.orientation);\n            }\n\n            Adapt.trigger('device:changed', Adapt.device.screenSize);\n        }\n\n        Adapt.trigger('device:resize', Adapt.device.screenWidth);\n\n    }, 100);\n\n    function isAppleDevice() {\n        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n    }\n\n    function getAppleScreenWidth() {\n        return (Math.abs(window.orientation) === 90) ? screen.height : screen.width;\n    }\n\n    function getAppleScreenHeight() {\n        return (Math.abs(window.orientation) === 90) ? screen.width : screen.height;\n    }\n\n    function getAppleDeviceType() {\n        var type = '';\n\n        var flags = ['iphone', 'ipad', 'ipod'];\n\n        for (var i = 0; i < flags.length; i++) {\n            if (Bowser[flags[i]]) {\n                type = flags[i];\n                break;\n            }\n        }\n\n        return type;\n    }\n\n    function pixelDensity() {\n        var pixelDensity = (window.devicePixelRatio || 1);\n\n        if (pixelDensity >= 3) {\n            return 'ultra-high';\n        } else if (pixelDensity >= 2) {\n            return 'high';\n        } else if (pixelDensity >= 1.5) {\n            return 'medium';\n        } else {\n            return 'low';\n        }\n    }\n\n    var browser = Adapt.device.browser.toLowerCase();\n    // Convert 'msie' and 'internet explorer' to 'ie'.\n    var browserString = browser.replace(/msie|internet explorer/, 'ie');\n    browserString = browserString + ' version-' + Adapt.device.version + ' OS-' + Adapt.device.OS + ' ' + getAppleDeviceType();\n    browserString += browserString.replace('.', '-').toLowerCase();\n\n    $html.addClass(browserString + ' pixel-density-' + pixelDensity());\n});\n\n",
    "define('core/js/views/drawerView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var DrawerView = Backbone.View.extend({\n\n        className: 'drawer display-none',\n        disableAnimation: false,\n        escapeKeyAttached: false,\n\n        initialize: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this._isVisible = false;\n            this.drawerDir = 'right';\n            if(Adapt.config.get('_defaultDirection')=='rtl'){//on RTL drawer on the left\n                this.drawerDir = 'left';\n            }\n            this.setupEventListeners();\n            this.render();\n            this.drawerDuration = Adapt.config.get('_drawer')._duration;\n            this.drawerDuration = (this.drawerDuration) ? this.drawerDuration : 400;\n            // Setup cached selectors\n            this.$wrapper = $('#wrapper');\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, 'navigation:toggleDrawer', this.toggleDrawer);\n            this.listenTo(Adapt, 'drawer:triggerCustomView', this.openCustomView);\n            this.listenTo(Adapt, 'drawer:closeDrawer', this.onCloseDrawer);\n            this.listenTo(Adapt, 'remove', this.onCloseDrawer);\n            this.listenTo(Adapt, 'accessibility:toggle', this.onAccessibilityToggle);\n            this._onKeyUp = _.bind(this.onKeyUp, this);\n            this.setupEscapeKey();\n        },\n\n        setupEscapeKey: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive;\n\n            if (!hasAccessibility && ! this.escapeKeyAttached) {\n                $(window).on(\"keyup\", this._onKeyUp);\n                this.escapeKeyAttached = true;\n            } else {\n                $(window).off(\"keyup\", this._onKeyUp);\n                this.escapeKeyAttached = false;\n            }\n        },\n\n        onAccessibilityToggle: function() {\n            this.setupEscapeKey();\n        },\n\n        onKeyUp: function(event) {\n            if (event.which != 27) return;\n            event.preventDefault();\n\n            this.onCloseDrawer();\n        },\n\n        events: {\n            'click .drawer-back': 'onBackButtonClicked',\n            'click .drawer-close':'onCloseDrawer'\n        },\n\n        render: function() {\n            var template = Handlebars.templates['drawer']\n            $(this.el).html(template({_globals: Adapt.course.get(\"_globals\")})).prependTo('body');\n            var shadowTemplate = Handlebars.templates['shadow'];\n            $(shadowTemplate()).prependTo('body');\n            // Set defer on post render\n            _.defer(_.bind(function() {\n                this.postRender();\n            }, this));\n            return this;\n        },\n\n        // Set tabindex for select elements\n        postRender: function() {\n            this.$('a, button, input, select, textarea').attr('tabindex', -1);\n\n            this.checkIfDrawerIsAvailable();\n        },\n\n        openCustomView: function(view, hasBackButton) {\n            // Set whether back button should display\n            this._hasBackButton = hasBackButton;\n            this._isCustomViewVisible = true;\n            Adapt.trigger('drawer:empty');\n            this.showDrawer();\n            this.$('.drawer-holder').html(view);\n        },\n\n        checkIfDrawerIsAvailable: function() {\n            if (this.collection.length == 0) {\n                $('.navigation-drawer-toggle-button').addClass('display-none');\n                Adapt.trigger('drawer:noItems');\n            } else {\n                $('.navigation-drawer-toggle-button').removeClass('display-none');\n            }\n        },\n\n        onBackButtonClicked: function(event) {\n            event.preventDefault();\n            this.showDrawer(true);\n        },\n\n        onCloseDrawer: function(event) {\n            if (event) {\n                event.preventDefault();\n            }\n            this.hideDrawer();\n        },\n\n        toggleDrawer: function() {\n            if (this._isVisible && this._isCustomViewVisible === false) {\n                this.hideDrawer();\n            } else {\n                this.showDrawer(true);\n            }\n        },\n\n        showDrawer: function(emptyDrawer) {\n            this.$el.removeClass('display-none');\n            //only trigger popup:opened if drawer is visible, pass popup manager drawer element\n            if (!this._isVisible) {\n                Adapt.trigger('popup:opened', this.$el);\n                $('body').scrollDisable();\n                this._isVisible = true;\n            }\n\n            var drawerWidth = this.$el.width();\n            // Sets tab index to 0 for all tabbable elements in Drawer\n            this.$('a, button, input, select, textarea').attr('tabindex', 0);\n\n            if (emptyDrawer) {\n                this.$('.drawer-back').addClass('display-none');\n                this._isCustomViewVisible = false;\n                this.emptyDrawer();\n                if(this.collection.models.length === 1) {\n                    Adapt.trigger(this.collection.models[0].get('eventCallback'));\n                } else {\n                    this.renderItems();\n                    Adapt.trigger('drawer:openedItemView');\n                }\n            } else {\n                if (this._hasBackButton && this.collection.models.length > 1) {\n                    this.$('.drawer-back').removeClass('display-none');\n                } else {\n                    this.$('.drawer-back').addClass('display-none');\n                }\n                Adapt.trigger('drawer:openedCustomView');\n            }\n\n            //delay drawer animation until after background fadeout animation is complete\n            if (this.disableAnimation) {\n                $('#shadow').removeClass(\"display-none\");\n\n                var direction={};\n                direction[this.drawerDir]=0;\n                this.$el.css(direction);\n                complete.call(this);\n                \n            } else {\n\n                $('#shadow').velocity({opacity:1},{duration:this.drawerDuration, begin: _.bind(function() {\n                    $(\"#shadow\").removeClass(\"display-none\");\n                    complete.call(this);\n                }, this)});\n\n                var showEasingAnimation = Adapt.config.get('_drawer')._showEasing;\n                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';\n                var direction={};\n                direction[this.drawerDir]=0;\n                this.$el.velocity(direction, this.drawerDuration, easing);\n\n            }\n\n            function complete() {\n                this.addShadowEvent();\n                Adapt.trigger('drawer:opened');\n                \n                //focus on first tabbable element in drawer\n                this.$el.a11y_focus();\n\t    }\n\n        },\n\n        emptyDrawer: function() {\n            this.$('.drawer-holder').empty();\n        },\n\n        renderItems: function() {\n            Adapt.trigger('drawer:empty');\n            this.emptyDrawer();\n            var models = this.collection.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var item = models[i];\n                new DrawerItemView({model: item});\n            }\n        },\n\n        hideDrawer: function() {\n            //only trigger popup:closed if drawer is visible\n            if (this._isVisible) {\n                Adapt.trigger('popup:closed');\n                this._isVisible = false;\n                $('body').scrollEnable();\n            } else {\n                return;\n            }\n\n            if (this.disableAnimation) {\n\n                var direction={};\n                direction[this.drawerDir]=-this.$el.width();\n                this.$el.css(direction).addClass('display-none');\n\n                $('#shadow').addClass(\"display-none\");\n\n                Adapt.trigger('drawer:closed');\n\n            } else {\n\n                var showEasingAnimation = Adapt.config.get('_drawer')._hideEasing;\n                var easing = (showEasingAnimation) ? showEasingAnimation : 'easeOutQuart';\n\n                var direction={};\n                direction[this.drawerDir]=-this.$el.width();\n                this.$el.velocity(direction, this.drawerDuration, easing, _.bind(function() {\n                    this.$el.addClass('display-none');\n                    Adapt.trigger('drawer:closed');\n                }, this));\n\n                $('#shadow').velocity({opacity:0}, {duration:this.drawerDuration, complete:function() {\n                    $('#shadow').addClass(\"display-none\");\n                }});\n\n            }\n\n            this._isCustomViewVisible = false;\n            this.removeShadowEvent();\n\n\n        },\n\n        addShadowEvent: function() {\n            $('#shadow').one('click touchstart', _.bind(function() {\n                this.onCloseDrawer();\n            }, this));\n        },\n\n        removeShadowEvent: function() {\n            $('#shadow').off('click touchstart');\n        },\n\n        remove: function() {\n            Backbone.View.prototype.remove.apply(this, arguments);\n            $(window).off(\"keyup\", this._onKeyUp);\n\n            Adapt.trigger('drawer:empty');\n            this.collection.reset();\n            $('#shadow').remove();\n        }\n\n    });\n\n    var DrawerItemView = Backbone.View.extend({\n\n        className: 'drawer-item',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'drawer:empty', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .drawer-item-open': 'onDrawerItemClicked'\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['drawerItem']\n            $(this.el).html(template(data)).appendTo('.drawer-holder');\n            return this;\n        },\n\n        onDrawerItemClicked: function(event) {\n            event.preventDefault();\n            var eventCallback = this.model.get('eventCallback');\n            Adapt.trigger(eventCallback);\n        }\n    });\n\n    return DrawerView;\n});\n\n",
    "define('core/js/drawer',[\n    'core/js/adapt',\n    'core/js/views/drawerView'\n], function(Adapt, DrawerView) {\n\n    var DrawerCollection = new Backbone.Collection();\n    var Drawer = {};\n\n    Drawer.addItem = function(drawerObject, eventCallback) {\n        drawerObject.eventCallback = eventCallback;\n        DrawerCollection.add(drawerObject);\n    };\n\n    Drawer.triggerCustomView = function(view, hasBackButton) {\n        if (hasBackButton !== false) {\n            hasBackButton = true;\n        }\n        Adapt.trigger('drawer:triggerCustomView', view, hasBackButton);\n    };\n\n    var init = function() {\n        var drawerView = new DrawerView({collection: DrawerCollection});\n\n        Adapt.on('app:languageChanged', function() {\n            drawerView.remove();\n            drawerView = new DrawerView({collection: DrawerCollection});\n        });\n    };\n\n    Adapt.once('app:dataReady', function() {\n        init();\n    });\n\n    Adapt.drawer = Drawer;\n\n});\n\n",
    "define('core/js/views/notifyView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var NotifyView = Backbone.View.extend({\n\n        className: 'notify',\n        disableAnimation: false,\n        escapeKeyAttached: false,\n\n        initialize: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n\n            this.setupEventListeners();\n\n            //include accessibility globals in notify model\n            this.model.set('_globals', Adapt.course.get('_globals'));\n            this.render();\n        },\n\n        setupEventListeners: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(Adapt, 'device:resize', this.resetNotifySize);\n            this.listenTo(Adapt, 'accessibility:toggle', this.onAccessibilityToggle);\n            this._onKeyUp = _.bind(this.onKeyUp, this);\n            this.setupEscapeKey();\n        },\n\n        setupEscapeKey: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility') && Adapt.config.get('_accessibility')._isActive;\n\n            if (!hasAccessibility && ! this.escapeKeyAttached) {\n                $(window).on(\"keyup\", this._onKeyUp);\n                this.escapeKeyAttached = true;\n            } else {\n                $(window).off(\"keyup\", this._onKeyUp);\n                this.escapeKeyAttached = false;\n            }\n        },\n\n        onAccessibilityToggle: function() {\n            this.setupEscapeKey();\n        },\n\n        onKeyUp: function(event) {\n            if (event.which != 27) return;\n            event.preventDefault();\n\n            this.closeNotify();\n        },\n\n        events: {\n            'click .notify-popup-alert-button':'onAlertButtonClicked',\n            'click .notify-popup-prompt-button': 'onPromptButtonClicked',\n            'click .notify-popup-done': 'onCloseButtonClicked',\n            'click .notify-shadow': 'onCloseButtonClicked'\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['notify'];\n\n            //hide notify container\n            this.$el.css(\"visibility\", \"hidden\");\n            //attach popup + shadow\n            this.$el.html(template(data)).prependTo('body');\n            //hide popup\n            this.$('.notify-popup').css(\"visibility\", \"hidden\");\n            //show notify container\n            this.$el.css(\"visibility\", \"visible\");\n\n            this.showNotify();\n            return this;\n        },\n\n        onAlertButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger(this.model.get('_callbackEvent'), this);\n        },\n\n        onPromptButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger($(event.currentTarget).attr('data-event'));\n        },\n\n        onCloseButtonClicked: function(event) {\n            event.preventDefault();\n            //tab index preservation, notify must close before subsequent callback is triggered\n            this.closeNotify();\n            Adapt.trigger(\"notify:cancelled\");\n        },\n\n        resetNotifySize: function() {\n            $('.notify-popup').removeAttr('style');\n\n            this.resizeNotify();\n        },\n\n        resizeNotify: function() {\n            var windowHeight = $(window).height();\n            var notifyHeight = this.$('.notify-popup').outerHeight();\n\n            if (notifyHeight > windowHeight) {\n                this.$('.notify-popup').css({\n                    'height':'100%',\n                    'top':0,\n                    'overflow-y': 'scroll',\n                    '-webkit-overflow-scrolling': 'touch'\n                });\n            } else {\n                this.$('.notify-popup').css({\n                    'margin-top': -(notifyHeight/2)\n                });\n            }\n        },\n\n        showNotify: function() {\n\n            Adapt.trigger('notify:opened', this);\n\n            if (this.$(\"img\").length > 0) {\n                this.$el.imageready( _.bind(loaded, this));\n            } else {\n                loaded.call(this);\n            }\n\n            function loaded() {\n                if (this.disableAnimation) {\n                    this.$('.notify-shadow').css(\"display\", \"block\");\n                } else {\n\n                    this.$('.notify-shadow').velocity({ opacity: 0 }, {duration:0}).velocity({ opacity: 1 }, {duration:400, begin: _.bind(function() {\n                        this.$('.notify-shadow').css(\"display\", \"block\");\n                    }, this)});\n\n                }\n\n                this.resizeNotify();\n\n                if (this.disableAnimation) {\n\n                    this.$('.notify-popup').css(\"visibility\", \"visible\");\n                    complete.call(this);\n                    \n                } else {\n\n                    this.$('.notify-popup').velocity({ opacity: 0 }, {duration:0}).velocity({ opacity: 1 }, { duration:400, begin: _.bind(function() {\n                        this.$('.notify-popup').css(\"visibility\", \"visible\");\n                        complete.call(this);\n                    }, this) });\n\n                }\n                \n                function complete() {\n                    /*ALLOWS POPUP MANAGER TO CONTROL FOCUS*/\n                    Adapt.trigger('popup:opened', this.$('.notify-popup'));\n                    $('body').scrollDisable();\n                    $('html').addClass('notify');\n\n                    //set focus to first accessible element\n                    this.$('.notify-popup').a11y_focus();\n                }\n            }\n\n        },\n\n        closeNotify: function (event) {\n\n            if (this.disableAnimation) {\n\n                this.$('.notify-popup').css(\"visibility\", \"hidden\");\n                this.$el.css(\"visibility\", \"hidden\");\n\n                this.remove();\n\n            } else {\n\n                this.$('.notify-popup').velocity({ opacity: 0 }, {duration:400, complete: _.bind(function() {\n                    this.$('.notify-popup').css(\"visibility\", \"hidden\");\n                }, this)});\n\n                this.$('.notify-shadow').velocity({ opacity: 0 }, {duration:400, complete:_.bind(function() {\n                    this.$el.css(\"visibility\", \"hidden\");\n                    this.remove();\n                }, this)});\n            }\n\n            $('body').scrollEnable();\n            $('html').removeClass('notify');\n\n            Adapt.trigger('popup:closed');\n            Adapt.trigger('notify:closed');\n        }\n\n    });\n\n    return NotifyView;\n\n});\n\n",
    "define('core/js/views/notifyPushView',[\n    'core/js/adapt'\n], function (Adapt) {\n\n    var NotifyPushView = Backbone.View.extend({\n\n        className: function () {\n            return 'notify-push ' + this.model.get('_classes');\n        },\n\n        initialize: function () {\n            this.listenTo(Adapt, 'notify:pushShown notify:pushRemoved', this.updateIndexPosition);\n            this.listenTo(this.model.collection, 'remove', this.updateIndexPosition);\n            this.listenTo(this.model.collection, 'change:_index', this.updatePushPosition);\n            this.listenTo(Adapt, 'remove', this.remove);\n\n            // Include accessibility globals in notify model.\n            this.model.set('_globals', Adapt.course.get('_globals'));\n\n            this.preRender();\n            this.render();\n        },\n\n        events: {\n            'click .notify-push-close': 'closePush',\n            'click .notify-push-inner': 'triggerEvent'\n        },\n\n        preRender: function () {\n            this.hasBeenRemoved = false;\n        },\n\n        render: function () {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates['notifyPush'];\n            this.$el.html(template(data)).appendTo('#wrapper');\n\n            _.defer(_.bind(function () {\n                this.postRender();\n            }, this));\n\n            return this;\n        },\n\n        postRender: function () {\n            this.$el.addClass('show');\n\n            _.delay(_.bind(function () {\n                this.closePush();\n            }, this), this.model.get('_timeout'));\n\n            Adapt.trigger('notify:pushShown');\n        },\n\n        closePush: function (event) {\n            if (event) {\n                event.preventDefault();\n            }\n\n            // Check whether this view has been removed as the delay can cause it to be fired twice\n            if (this.hasBeenRemoved === false) {\n\n                this.hasBeenRemoved = true;\n\n                this.$el.removeClass('show');\n\n                _.delay(_.bind(function () {\n                    this.model.collection.remove(this.model);\n                    Adapt.trigger('notify:pushRemoved', this);\n                    this.remove();\n                }, this), 600);\n            }\n        },\n\n        triggerEvent: function (event) {\n            Adapt.trigger(this.model.get('_callbackEvent'));\n            this.closePush();\n        },\n\n        updateIndexPosition: function () {\n            if (!this.hasBeenRemoved) {\n                var models = this.model.collection.models;\n                for (var i = 0, len = models.length; i < len; i++) {\n                    var index = i;\n                    var model = models[i];\n                    if (model.get('_isActive') === true) {\n                        model.set('_index', index);\n                        this.updatePushPosition();\n                    }\n                }\n            }\n        },\n\n        updatePushPosition: function () {\n            if (this.hasBeenRemoved) {\n                return;\n            }\n\n            if (this.model.get('_index') != undefined) {\n                var elementHeight = this.$el.height();\n                var offset = 20;\n                var navigationHeight = $('.navigation').height();\n                var currentIndex = this.model.get('_index');\n                var flippedIndex = (currentIndex == 0) ? 1 : 0;\n\n                if (this.model.collection.where({ _isActive: true }).length === 1) {\n                    flippedIndex = 0;\n                }\n\n                var positionLowerPush = (elementHeight + offset) * flippedIndex + navigationHeight + offset;\n                this.$el.css('top', positionLowerPush);\n            }\n        }\n    });\n\n    return NotifyPushView;\n\n});\n\n",
    "define('core/js/models/notifyModel',[],function() {\n\n    var NotifyModel = Backbone.Model.extend({\n        defaults: {\n        \t_isActive:false,\n        \t_showIcon:false,\n        \t_timeout:3000\n        }\n    });\n\n    return NotifyModel;\n\n});\n\n",
    "define('core/js/notify',[\n\t'core/js/adapt',\n\t'core/js/views/notifyView',\n\t'core/js/views/notifyPushView',\n\t'core/js/models/notifyModel'\n], function(Adapt, NotifyView, NotifyPushView, NotifyModel) {\n\n\t// Build a collection to store push notifications\n\tvar NotifyPushCollection = Backbone.Collection.extend({\n\n\t\tmodel: NotifyModel,\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo(this, 'add', this.onPushAdded);\n\t\t\tthis.listenTo(Adapt, 'notify:pushRemoved', this.onRemovePush);\n\t\t},\n\n\t\tonPushAdded: function(model) {\n\t\t\tthis.checkPushCanShow(model);\n\t\t},\n\n\t\tcheckPushCanShow: function(model) {\n\t\t\tif (this.canShowPush()) {\n\t\t\t\tmodel.set('_isActive', true);\n\t\t\t\tthis.showPush(model);\n\t\t\t}\n\t\t},\n\n\t\tcanShowPush: function() {\n\t\t\tvar availablePushNotifications = this.where({_isActive:true});\n\t\t\tif (availablePushNotifications.length >= 2) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\tshowPush: function(model) {\n\t\t\tnew NotifyPushView({\n\t\t\t\tmodel: model\n\t\t\t});\n\t\t},\n\n\t\tonRemovePush: function(view) {\n\t\t\tvar inactivePushNotifications = this.where({_isActive:false});\n\t\t\tif (inactivePushNotifications.length > 0) {\n\t\t\t\tthis.checkPushCanShow(inactivePushNotifications[0]);\n\t\t\t}\n\t\t}\n\n\t});\n\n\tvar NotifyPushes = new NotifyPushCollection();\n\n\tAdapt.on('notify:alert', function(notifyObject) {\n\t\taddNotifyView('alert', notifyObject);\n\t});\n\n\tAdapt.on('notify:prompt', function(notifyObject) {\n\t\taddNotifyView('prompt', notifyObject);\n\t});\n\n\tAdapt.on('notify:popup', function(notifyObject) {\n\t\taddNotifyView('popup', notifyObject);\n\t});\n\n\tAdapt.on('notify:push', function(notifyObject) {\n\t\taddNotifyView('push', notifyObject);\n\t});\n\n\tfunction addNotifyView(type, notifyObject) {\n\t\tnotifyObject._type = type;\n\n\t\tif (type === 'push') {\n\n\t\t\tNotifyPushes.push(notifyObject);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar notify = new NotifyView({\n\t\t\tmodel: new NotifyModel(notifyObject)\n\t\t});\n\n\t}\n\n});\n\n",
    "define('core/js/popupManager',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    Adapt.on('popup:opened', function($element) {\n\n\t\t//capture currently active element or element specified\n        var $activeElement = $element || $(document.activeElement);\n\n        //save tab indexes\n        $activeElement.a11y_popup();\n    });\n\n    Adapt.on('popup:closed', function() {\n\n        //restore tab indexes\n        $.a11y_popdown();\n\n    });\n\n});\n\n",
    "define('core/js/models/routerModel',[\n    'core/js/adapt'\n], function (Adapt) {\n\n \tvar RouterModel = Backbone.Model.extend({\n\n \t\tdefaults: {\n \t\t\t_canNavigate: true\n \t\t},\n\n \t\tlockedAttributes: {\n \t\t\t_canNavigate: false\n \t\t}\n \t\t\n \t});\n\n \treturn RouterModel;\n\n });\n\n",
    "define('core/js/views/adaptView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AdaptView = Backbone.View.extend({\n\n        attributes: function() {\n            return {\n                \"data-adapt-id\": this.model.get('_id')\n            };\n        },\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(this.model, 'change:_isVisible', this.toggleVisibility);\n            this.model.set('_globals', Adapt.course.get('_globals'));\n            this.model.set('_isReady', false);\n            this._isRemoved = false;\n            this.preRender();\n            this.render();\n            this.setupOnScreenHandler();\n        },\n\n        preRender: function() {},\n\n        postRender: function() {\n            this.addChildren();\n        },\n\n        render: function() {\n            Adapt.trigger(this.constructor.type + 'View:preRender', this);\n\n            var data = this.model.toJSON();\n            data.view = this;\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n\n            _.defer(_.bind(function() {\n                // don't call postRender after remove\n                if(this._isRemoved) return;\n\n                this.postRender();\n                Adapt.trigger(this.constructor.type + 'View:postRender', this);\n            }, this));\n\n            return this;\n        },\n\n        setupOnScreenHandler: function() {\n            var onscreen = this.model.get('_onScreen');\n\n            if (!onscreen || !onscreen._isEnabled) return;\n\n            this.$el.on('onscreen.adaptView', _.bind(function (e, m) {\n\n                if (!m.onscreen) return;\n\n                var minVerticalInview = onscreen._percentInviewVertical || 33;\n\n                if (m.percentInviewVertical < minVerticalInview) return;\n\n                this.$el.addClass( onscreen._classes || 'onscreen' ).off('onscreen.adaptView');\n\n            }, this));\n        },\n\n        addChildren: function() {\n            var nthChild = 0;\n            var children = this.model.getChildren();\n            var models = children.models;\n            for (var i = 0, len = models.length; i < len; i++) {\n                var model = models[i];\n                if (model.get('_isAvailable')) {\n                    nthChild ++;\n\n                    var ChildView;\n                    var ViewModelObject = this.constructor.childView || Adapt.componentStore[model.get(\"_component\")];\n\n                    //use view+model object\n                    if (ViewModelObject.view) ChildView = ViewModelObject.view;\n                    //use view only object\n                    else ChildView = ViewModelObject;\n\n                    if (ChildView) {\n                        var $parentContainer = this.$(this.constructor.childContainer);\n                        model.set(\"_nthChild\", nthChild);\n                        $parentContainer.append(new ChildView({model:model}).$el);\n                    } else {\n                        throw 'The component \\'' + models[i].attributes._id + '\\'' +\n                              ' (\\'' + models[i].attributes._component + '\\')' +\n                              ' has not been installed, and so is not available in your project.';\n                    }\n                }\n            }\n        },\n\n        setReadyStatus: function() {\n            this.model.set('_isReady', true);\n        },\n\n        setCompletionStatus: function() {\n            if (this.model.get('_isVisible')) {\n                this.model.set('_isComplete', true);\n                this.model.set('_isInteractionComplete', true);\n            }\n        },\n\n        resetCompletionStatus: function(type) {\n            if (!this.model.get(\"_canReset\")) return;\n\n            var descendantComponents = this.model.findDescendants('components');\n            if (descendantComponents.length === 0) {\n                this.model.reset(type);\n            } else {\n                descendantComponents.each(function(model) {\n                    model.reset(type);\n                });\n            }\n        },\n\n        preRemove: function() {},\n\n        remove: function() {\n            Adapt.trigger('plugin:beginWait');\n            this.preRemove();\n            this._isRemoved = true;\n\n            _.defer(_.bind(function() {\n                this.$el.off('onscreen.adaptView');\n                this.model.setOnChildren('_isReady', false);\n                this.model.set('_isReady', false);\n                Backbone.View.prototype.remove.call(this);\n                Adapt.trigger('plugin:endWait');\n            }, this));\n\n            return this;\n        },\n\n        setVisibility: function() {\n            var visible = \"visibility-hidden\";\n            if (this.model.get('_isVisible')) {\n                visible = \"\";\n            }\n            return visible;\n        },\n\n        toggleVisibility: function() {\n            if (this.model.get('_isVisible')) {\n                return this.$el.removeClass('visibility-hidden');\n            }\n            this.$el.addClass('visibility-hidden');\n        }\n\n    });\n\n    return AdaptView;\n\n});\n\n",
    "define('core/js/views/blockView',[\n    'core/js/views/adaptView'\n], function(AdaptView) {\n\n    var BlockView = AdaptView.extend({\n\n        className: function() {\n            return \"block \" + \n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility() +\n            \" nth-child-\" +\n            this.model.get(\"_nthChild\");\n        }\n\n    }, {\n        childContainer: '.component-container',\n        type: 'block',\n        template: 'block'\n    });\n\n    return BlockView;\n\n});\n",
    "define('core/js/views/articleView',[\n    'core/js/views/adaptView',\n    'core/js/views/blockView'\n], function(AdaptView, BlockView) {\n\n    var ArticleView = AdaptView.extend({\n        \n        className: function() {\n            return \"article \" +\n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') +\n            \" \" + this.setVisibility() +\n            \" nth-child-\" +\n            this.model.get(\"_nthChild\");\n        }\n\n    }, {\n        childContainer: '.block-container',\n        childView: BlockView,\n        type: 'article',\n        template: 'article'\n    });\n\n    return ArticleView;\n\n});\n",
    "define('core/js/views/pageView',[\n    'core/js/adapt',\n    'core/js/views/adaptView',\n    'core/js/views/articleView'\n], function(Adapt, AdaptView, ArticleView) {\n\n    var PageView = AdaptView.extend({\n        \n        className: function() {\n            return \"page \" + \n            this.model.get('_id') + \n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility();\n        },\n\n        preRender: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this.$el.css('opacity', 0);\n            this.listenTo(this.model, 'change:_isReady', this.isReady);\n        },\n\n        isReady: function() {\n            if (this.model.get('_isReady')) {\n                _.defer(_.bind(function() {\n                    $('.loading').hide();\n                    $(window).scrollTop(0);\n                    Adapt.trigger('pageView:ready', this);\n                    var styleOptions = { opacity: 1 };\n                    if (this.disableAnimation) {\n                        this.$el.css(styleOptions);\n                        $.inview();\n                    } else {\n                        this.$el.velocity(styleOptions, {\n                            duration: 'fast',\n                            complete: function() {\n                                $.inview();\n                            }\n                        });\n                    }\n                    $(window).scroll();\n                }, this));\n            }\n        }\n\n    }, {\n        childContainer: '.article-container',\n        childView: ArticleView,\n        type: 'page',\n        template: 'page'\n    });\n\n    return PageView;\n\n});\n",
    "define('core/js/router',[\n    'core/js/adapt',\n    'core/js/models/routerModel',\n    'core/js/views/pageView',\n    'core/js/startController'\n], function(Adapt, RouterModel, PageView) {\n\n    Adapt.router = new RouterModel(null, {reset: true});\n\n    var Router = Backbone.Router.extend({\n\n        _isCircularNavigationInProgress: false,\n\n        initialize: function() {\n            this.showLoading();\n            // Store #wrapper element to cache for later\n            this.$wrapper = $('#wrapper');\n            this.$html = $('html');\n\n            Adapt.once('app:dataReady', function() {\n                document.title = Adapt.course.get('title');\n            });\n            this.listenTo(Adapt, 'navigation:backButton', this.navigateToPreviousRoute);\n            this.listenTo(Adapt, 'navigation:homeButton', this.navigateToHomeRoute);\n            this.listenTo(Adapt, 'navigation:skipNavigation', this.skipNavigation);\n            this.listenTo(Adapt, 'navigation:parentButton', this.navigateToParent);\n            this.listenTo(Adapt, \"router:navigateTo\", this.navigateToArguments);\n        },\n\n        routes: {\n            \"\": \"handleRoute\",\n            \"id/:id\": \"handleRoute\",\n            \":pluginName(/*location)(/*action)\": \"handleRoute\"\n        },\n\n        pruneArguments: function(args) {\n            var prunedArgs = _.toArray(args);\n\n            if (prunedArgs.length !== 0) {\n                // Remove any null arguments.\n                prunedArgs = _.without(args, null);\n            }\n\n            return prunedArgs;\n        },\n\n        handleRoute: function() {\n            var args = this.pruneArguments(arguments);\n            \n            var canNavigate = Adapt.router.get('_canNavigate');\n            \n            if (canNavigate) {\n                // Reset _isCircularNavigationInProgress protection as code is allowed to navigate away\n                this._isCircularNavigationInProgress = false;\n            }\n\n            //check if the current page is in the progress of navigating to itself\n            //it will redirect to itself if the url was changed and _canNavigate is false\n            if (this._isCircularNavigationInProgress === false) {\n                //trigger an event pre 'router:location' to allow extensions to stop routing\n                Adapt.trigger(\"router:navigate\", args);\n            }\n\n            if (canNavigate) {\n\n                //disable navigation whilst rendering\n                Adapt.router.set('_canNavigate', false, {pluginName: \"adapt\"});\n\n                //only navigate if this switch is set\n                switch (args.length) {\n                    case 1:\n                        //if only one parameter assume id\n                        return this.handleId.apply(this, args);\n                    case 2:\n                        //if two parameters assume plugin\n                        return this.handlePluginRouter.apply(this, args);\n                }\n                //if < 1 || > 2 parameters, route to course\n                return this.handleCourse();\n            }\n\n            if (this._isCircularNavigationInProgress) {\n                //navigation correction finished\n                //router has successfully renavigated to the current id as the url was changed whilst _canNavigate: false\n                this._isCircularNavigationInProgress = false;\n                return;\n            }\n\n            //cancel navigation to stay at current location\n            this._isCircularNavigationInProgress = true;\n            Adapt.trigger(\"router:navigationCancelled\", args);\n\n            //reset url to current one\n            this.navigateToCurrentRoute(true);\n\n        },\n\n        handlePluginRouter: function(pluginName, location, action) {\n            var pluginLocation = pluginName;\n            if (location) {\n                pluginLocation = pluginLocation + '-' +location;\n                if (action) {\n                    pluginLocation = pluginLocation + '-' + action;\n                }\n            }\n            this.updateLocation(pluginLocation, null, null, function() {\n                Adapt.trigger('router:plugin:' + pluginName, pluginName, location, action);\n                Adapt.trigger('router:plugin', pluginName, location, action);\n\n                Adapt.router.set('_canNavigate', true, {pluginName: \"adapt\"});\n            });\n        },\n\n        handleCourse: function() {\n            if (Adapt.course.has('_start')) {\n                // Do not allow access to the menu when the start controller is enabled.\n                var startController = Adapt.course.get('_start');\n\n                if (startController._isEnabled == true && startController._isMenuDisabled == true) {\n                    return;\n                }\n            }\n\n            this.showLoading();\n            this.removeViews(_.bind(function() {\n                Adapt.course.set('_isReady', false);\n                this.setContentObjectToVisited(Adapt.course);\n                this.updateLocation('course', null, null, _.bind(function() {\n                    Adapt.once('menuView:ready', function() {\n                        // Allow navigation\n                        Adapt.router.set('_canNavigate', true, {pluginName: \"adapt\"});\n                    });\n                    Adapt.trigger('router:menu', Adapt.course);\n                }, this));\n            }, this));\n        },\n\n        handleId: function(id) {\n\n            var currentModel = Adapt.findById(id);\n            var type = '';\n\n            if (!currentModel) {\n                Adapt.router.set('_canNavigate', true, {pluginName: \"adapt\"});\n                return;\n            }\n\n            type = currentModel.get('_type');\n\n            switch (type) {\n                case 'page':\n                case 'menu':\n                    if (currentModel.get('_isLocked') && Adapt.config.get('_forceRouteLocking')) {\n                        console.log('Unable to navigate to locked id: ' + id);\n                        Adapt.router.set('_canNavigate', true, {pluginName: \"adapt\"});\n                        if (Adapt.location._previousId === undefined) {\n                            return this.navigate(\"#/\", {trigger:true, replace:true});\n                        } else {\n                            return Backbone.history.history.back();\n                        }\n                    } else {\n                        this.showLoading();\n                        this.removeViews(_.bind(function() {\n\n                            this.setContentObjectToVisited(currentModel);\n\n                            if (type == 'page') {\n                                var location = 'page-' + id;\n                                this.updateLocation(location, 'page', id, _.bind(function() {\n                                    Adapt.once('pageView:ready', function() {\n                                        // Allow navigation\n                                        Adapt.router.set('_canNavigate', true, {pluginName: \"adapt\"});\n                                    });\n                                    Adapt.trigger('router:page', currentModel);\n                                    this.$wrapper.append(new PageView({model: currentModel}).$el);\n                                }, this));\n                            } else {\n                                var location = 'menu-' + id;\n                                this.updateLocation(location, 'menu', id, _.bind(function() {\n                                    Adapt.once('menuView:ready', function() {\n                                        // Allow navigation\n                                        Adapt.router.set('_canNavigate', true, {pluginName: \"adapt\"});\n                                    });\n                                    Adapt.trigger('router:menu', currentModel);\n                                }, this));\n                            }\n                        }, this));\n                    }\n                break;\n                default:\n                    //allow navigation\n                    Adapt.router.set('_canNavigate', true, {pluginName: \"adapt\"});\n                    Adapt.navigateToElement('.' + id, {replace: true});\n            }\n        },\n\n        removeViews: function(onComplete) {\n            Adapt.remove();\n\n            if (!Adapt.isWaitingForPlugins()) onComplete();\n            else Adapt.once('plugins:ready', onComplete);\n        },\n\n        showLoading: function() {\n            $('.loading').show();\n        },\n\n        navigateToArguments: function(args) {\n            args = this.pruneArguments(args);\n\n            switch (args.length) {\n                case 0:\n                    this.navigate(\"#/\", {trigger:false, replace:false});\n                    break;\n                case 1:\n                    if (Adapt.findById(args[0])) {\n                        this.navigate(\"#/id/\"+args[0], {trigger:false, replace:false});\n                    } else {\n                        this.navigate(\"#/\"+args[0], {trigger:false, replace:false});\n                    }\n                    break;\n                case 2:\n                    this.navigate(\"#/\"+args[0]+\"/\"+args[1], {trigger:false, replace:false});\n                    break;\n                case 3:\n                    this.navigate(\"#/\"+args[0]+\"/\"+args[1]+\"/\"+args[2], {trigger:false, replace:false});\n                    break;\n            }\n\n            this.handleRoute.apply(this, args);\n        },\n\n        skipNavigation: function() {\n\n             $(\".\"+Adapt.location._contentType).a11y_focus();\n\n        },\n\n        navigateToPreviousRoute: function(force) {\n            // Sometimes a plugin might want to stop the default navigation\n            // Check whether default navigation has changed\n            if (Adapt.router.get('_canNavigate') || force) {\n                if (!Adapt.location._currentId) {\n                    return Backbone.history.history.back();\n                }\n                if (Adapt.location._previousContentType === \"page\" && Adapt.location._contentType === \"menu\") {\n                    return this.navigateToParent();\n                }\n                if (Adapt.location._previousContentType === \"page\") {\n                    return Backbone.history.history.back();\n                }\n                if (Adapt.location._currentLocation === 'course') {\n                    return;\n                }\n                this.navigateToParent();\n            }\n        },\n\n        navigateToHomeRoute: function(force) {\n            if (Adapt.router.get('_canNavigate') || force ) {\n                this.navigate('#/', {trigger: true});\n            }\n        },\n\n        navigateToCurrentRoute: function(force) {\n\n            if (Adapt.router.get('_canNavigate') || force) {\n                if (!Adapt.location._currentId) {\n                    return;\n                }\n                var currentId = Adapt.location._currentId;\n                var route = (currentId === Adapt.course.get(\"_id\")) ? \"#/\" : \"#/id/\" + currentId;\n                this.navigate(route, { trigger: true, replace: true });\n            }\n        },\n\n        navigateToParent: function(force) {\n            if (Adapt.router.get('_canNavigate') || force) {\n                var parentId = Adapt.contentObjects.findWhere({_id:Adapt.location._currentId}).get(\"_parentId\");\n                var route = (parentId === Adapt.course.get(\"_id\")) ? \"#/\" : \"#/id/\" + parentId;\n                this.navigate(route, { trigger: true });\n            }\n        },\n\n        setContentObjectToVisited: function(model) {\n            model.set('_isVisited', true);\n        },\n\n        updateLocation: function(currentLocation, type, id, onComplete) {\n            // Handles updating the location\n            Adapt.location._previousId = Adapt.location._currentId;\n            Adapt.location._previousContentType = Adapt.location._contentType;\n\n            if (currentLocation === 'course') {\n                Adapt.location._currentId = Adapt.course.get('_id');\n                Adapt.location._contentType = 'menu';\n                Adapt.location._lastVisitedMenu = currentLocation;\n            } else if (!type) {\n                Adapt.location._currentId = null;\n                Adapt.location._contentType = null;\n\n            } else if (_.isString(id)) {\n                Adapt.location._currentId = id;\n                Adapt.location._contentType = type;\n                if (type === 'menu') {\n                    Adapt.location._lastVisitedType = 'menu';\n                    Adapt.location._lastVisitedMenu = id;\n                } else if (type === 'page') {\n                    Adapt.location._lastVisitedType = 'page';\n                    Adapt.location._lastVisitedPage = id;\n                }\n            }\n\n            Adapt.location._currentLocation = currentLocation;\n\n            var classes = (Adapt.location._currentId) ? 'location-'\n                    + Adapt.location._contentType\n                    + ' location-id-'\n                    + Adapt.location._currentId :\n                    'location-' + Adapt.location._currentLocation;\n\n            var previousClasses = Adapt.location._previousClasses;\n            if (previousClasses) {\n                this.$html.removeClass(previousClasses);\n            }\n            Adapt.location._previousClasses = classes;\n\n            this.$html\n                .addClass(classes)\n                .attr('data-location', Adapt.location._currentLocation);\n                \n            this.$wrapper\n                .removeClass()\n                .addClass(classes)\n                .attr('data-location', Adapt.location._currentLocation);\n\n            this.setDocumentTitle();\n\n            // Trigger event when location changes\n            Adapt.trigger('router:location', Adapt.location);\n\n            if (!Adapt.isWaitingForPlugins()) onComplete();\n            else Adapt.once('plugins:ready', onComplete);\n        },\n\n        setDocumentTitle: function() {\n            if (!Adapt.location._currentId) return;\n\n            var currentModel = Adapt.findById(Adapt.location._currentId);\n\n            var pageTitle = \"\";\n            if (currentModel && currentModel.get(\"_type\") !== \"course\") {\n                var currentTitle = currentModel.get(\"title\");\n                if (currentTitle) pageTitle = \" | \" + currentTitle;\n            }\n\n            var courseTitle = Adapt.course.get(\"title\");\n            var documentTitle = $(\"<div>\" + courseTitle + pageTitle + \"</div>\").text();\n\n            Adapt.once(\"pageView:ready menuView:ready\", function() {\n                document.title = documentTitle;\n            });\n\n        }\n\n\n    });\n\n    return new Router({model: new Backbone.Model()});\n\n});\n\n",
    "define('core/js/helpers',[\n    'handlebars',\n    'core/js/adapt'\n], function(Handlebars, Adapt){\n\n    var helpers = {\n\n        lowercase: function(text) {\n            return text.toLowerCase();\n        },\n        \n        capitalise:  function(text) {\n            return text.charAt(0).toUpperCase() + text.slice(1);\n        },\n\n        inc: function(index) {\n            return index+1;\n        },\n\n        dec: function(index) {\n            return index-1;\n        },\n\n        odd: function (index) {\n            return (index +1) % 2 === 0  ? 'even' : 'odd';\n        },\n\n        equals: function(value, text, block) {\n            return helpers.compare.call(this, value, \"==\", text, block);\n        },\n\n        compare: function(value, operator, text, block) {\n            // Comparison operators\n            switch (operator) {\n            case \"===\":\n                if (value === text) return block.fn(this);\n                break;\n            case \"=\": case \"==\":\n                if (value == text) return block.fn(this);\n                break;\n            case \">=\":\n                if (value >= text) return block.fn(this);\n                break;\n            case \"<=\":\n                if (value <= text) return block.fn(this);\n                break;\n            case \">\":\n                if (value > text) return block.fn(this);\n                break;\n            case \"<\":\n                if (value < text) return block.fn(this);\n                break;\n            }\n            return block.inverse(this);\n        },\n\n        math: function(lvalue, operator, rvalue, options) {\n            // Mathematical operators\n            lvalue = parseFloat(lvalue);\n            rvalue = parseFloat(rvalue);\n            switch (operator) {\n            case \"+\": return lvalue + rvalue;\n            case \"-\": return lvalue - rvalue;\n            case \"*\": return lvalue * rvalue;\n            case \"/\": return lvalue / rvalue;\n            case \"%\": return lvalue % rvalue;\n            }\n        },\n\n        /**\n         * Allow JSON to be a template i.e. you can use handlebars {{expressions}} within your JSON\n         */\n        compile: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            var data = this;\n            if (context) {\n                // choose between a passed argument context or the default handlebars helper context\n                data = (!context.data || !context.data.root ? context : context.data.root);\n            }\n            return Handlebars.compile(template)(data);\n        },\n\n        /**\n         * Allow JSON to be a template and accessible text\n         */\n        compile_a11y_text: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            return Handlebars.helpers.a11y_text.call(this, helpers.compile.call(this, template, context));\n        },\n\n        /**\n         * Allow JSON to be a template and normalized text\n         */\n        compile_a11y_normalize: function(template, context) {\n            if (!template) return \"\";\n            if (template instanceof Object) template = template.toString();\n            return Handlebars.helpers.a11y_normalize.call(this, helpers.compile.call(this, template, context));\n        },\n\n        /**\n         * makes the _globals object in course.json available to a template\n         */ \n        import_globals: function(context) {\n            if(!context.data.root._globals) {\n                context.data.root._globals = Adapt.course.get('_globals');\n            }\n            return \"\";\n        }\n\n    };\n\n    // Compatibility references\n    helpers['if_value_equals'] = helpers['equals'];\n    helpers['numbers'] = helpers['inc'];\n    helpers['lowerCase'] = helpers['lowercase'];\n\n    for (var name in helpers) {\n        if (helpers.hasOwnProperty(name)) {\n             Handlebars.registerHelper(name, helpers[name]);\n        }\n    }\n\n    return helpers;\n\n});\n\n",
    "define('core/js/views/componentView',[\n    'core/js/adapt',\n    'core/js/views/adaptView'\n], function(Adapt, AdaptView) {\n\n    var ComponentView = AdaptView.extend({\n\n        className: function() {\n            return \"component \" + \n            this.model.get('_component') + \n            \"-component \" + this.model.get('_id') + \n            \" \" + this.model.get('_classes') + \n            \" \" + this.setVisibility() + \n            \" component-\" + this.model.get('_layout') + \n            \" nth-child-\" + this.model.get(\"_nthChild\");\n        },\n\n        initialize: function(){\n\t\t\t//standard initialization + renderState function\n            AdaptView.prototype.initialize.apply(this, arguments);\n            this.renderState();\n        },\n\n        renderState: function() {\n            if (!Handlebars.partials['state']) return;\n\n\t\t\t// do not perform if component has .not-accessible class\n            if (this.$el.is(\".not-accessible\")) return;\n\t\t\t// do not perform if component has .no-state class\n            if (this.$el.is(\".no-state\")) return;\n\n\t\t\t//remove pre-exisiting states\n            var $previousState = this.$(\".accessibility-state\").remove();\n\n            //render and append state partial\n            var $rendered = $(Handlebars.partials['state']( this.model.toJSON() ));\n\n            //restore previous tab index if not on\n            var previousTabIndex = $previousState.find(\".aria-label\").attr(\"tabindex\");\n            if (previousTabIndex == \"-1\") {\n                $rendered.find(\".aria-label\").attr(\"tabindex\", previousTabIndex);\n            }\n\n            this.$el.append( $rendered );\n\n            this.listenToOnce(this.model, 'change:_isComplete', this.renderState);\n        },\n\n        postRender: function() {}\n\n    }, {\n        type:'component'\n    });\n\n    return ComponentView;\n\n});\n",
    "define('components/adapt-contrib-blank/js/adapt-contrib-blank',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Blank = ComponentView.extend({\n\n\n        preRender: function() {\n            this.$el.addClass(\"no-state\");\n            // Checks to see if the blank should be reset on revisit\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n            this.$('.component-inner').on('inview', _.bind(this.inview, this));\n        },\n\n        // Used to check if the blank should reset on revisit\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$('.component-inner').off('inview');\n                    this.setCompletionStatus();\n                }\n\n            }\n        }\n\n    });\n\n    Adapt.register('blank', Blank);\n\n    return Blank;\n\n});\n\n",
    "define('components/adapt-contrib-text/js/adapt-contrib-text',['require','coreViews/componentView','coreJS/adapt'],function(require) {\n\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    var Text = ComponentView.extend({\n\n        preRender: function() {\n            this.checkIfResetOnRevisit();\n        },\n\n        postRender: function() {\n            this.setReadyStatus();\n\n            this.setupInview();\n        },\n\n        setupInview: function() {\n            var selector = this.getInviewElementSelector();\n\n            if (!selector) {\n                this.setCompletionStatus();\n            } else {\n                this.model.set('inviewElementSelector', selector);\n                this.$(selector).on('inview', _.bind(this.inview, this));\n            }\n        },\n\n        /**\n         * determines which element should be used for inview logic - body, instruction or title - and returns the selector for that element\n         */\n        getInviewElementSelector: function() {\n            if(this.model.get('body')) return '.component-body';\n\n            if(this.model.get('instruction')) return '.component-instruction';\n            \n            if(this.model.get('displayTitle')) return '.component-title';\n\n            return null;\n        },\n\n        checkIfResetOnRevisit: function() {\n            var isResetOnRevisit = this.model.get('_isResetOnRevisit');\n\n            // If reset is enabled set defaults\n            if (isResetOnRevisit) {\n                this.model.reset(isResetOnRevisit);\n            }\n        },\n\n        inview: function(event, visible, visiblePartX, visiblePartY) {\n            if (visible) {\n                if (visiblePartY === 'top') {\n                    this._isVisibleTop = true;\n                } else if (visiblePartY === 'bottom') {\n                    this._isVisibleBottom = true;\n                } else {\n                    this._isVisibleTop = true;\n                    this._isVisibleBottom = true;\n                }\n\n                if (this._isVisibleTop && this._isVisibleBottom) {\n                    this.$(this.model.get('inviewElementSelector')).off('inview');\n                    this.setCompletionStatus();\n                }\n            }\n        },\n\n        remove: function() {\n            if(this.model.has('inviewElementSelector')) {\n                this.$(this.model.get('inviewElementSelector')).off('inview');\n            }\n            \n            ComponentView.prototype.remove.call(this);\n        }\n    },\n    {\n        template: 'text'\n    });\n\n    Adapt.register('text', Text);\n\n    return Text;\n});\n\n",
    "/**\n * Utility to generate GUID codes.\n * @author Fabio Beoni: https://github.com/fabiobeoni | https://it.linkedin.com/in/fabio-beoni-6a7848101\n */\ndefine('components/adaptInteractiveMapPlaces/libraries/Utils',[],function () {\n    return {\n        s4:function() {\n            return Math.floor((1 + Math.random()) * 0x10000)\n                .toString(16)\n                .substring(1);\n        },\n        guid:function() {\n            return this.s4() +\n                this.s4() + '-' +\n                this.s4() + '-' +\n                this.s4() + '-' +\n                this.s4() + '-' +\n                this.s4()\n        }\n    };\n});\n\n",
    "/**\n * Google Maps wrapper class to expose only context related features.\n *\n * @author Fabio Beoni: https://github.com/fabiobeoni | https://it.linkedin.com/in/fabio-beoni-6a7848101\n */\ndefine('components/adaptInteractiveMapPlaces/libraries/MapWrapper',[],function () {\n\n    var MapWrapper = function () {\n\n            /**\n             * google key needed to invoke the service\n             */\n            this.apiKey=null;\n\n            /**\n             * Map language to use, default English.\n             */\n            this.language = 'en';\n\n            /**\n             * Map GeoCoder to look for places\n             */\n            this.geocoder = null;\n\n            /**\n             * Current map object\n             */\n            this.map=null;\n\n            /**\n             * Array of all markers objects added to map\n             */\n            this.markers=[];\n\n            /**\n             * Marker information window factory\n             */\n            this.infowindow=null;\n\n            /**\n             * Number of places returned by the query to google api\n             * that are actually found by the query, can be smaller\n             * than the requestedPlaces.\n             */\n            this.foundPlaces = 0;\n\n            /**\n             * Number of places requested to google api\n             */\n            this.requestedPlaces = 0;\n\n            /**\n             * Place request result status\n             */\n            this.geoCodeStatus = {\n                OK:\"OK\", //indicates that no errors occurred; the address was successfully parsed and at least one geocode was returned.\n                ZERO_RESULTS:\"ZERO_RESULTS\", //indicates that the geocode was successful but returned no results. This may occur if the geocoder was passed a non-existent address.\n                OVER_QUERY_LIMIT:\"OVER_QUERY_LIMIT\", //indicates that you are over your quota.\n                REQUEST_DENIED:\"REQUEST_DENIED\", //indicates that your request was denied.\n                INVALID_REQUEST:\"INVALID_REQUEST\", //generally indicates that the query (address, components or latlng) is missing.\n                UNKNOWN_ERROR:\"UNKNOWN_ERROR\" //indicates that the request could not be processed due to a server error. The request may succeed if you try again.\n            };\n\n            /**\n             * Domains used to load the map, China has his own.\n             */\n            this.googleDomains={\n                'general':'maps.googleapis.com',\n                'zh-CN':'maps.googleapis.cn'\n            };\n\n            this.mapElemID=null;\n            this.messageListElemID=null;\n\n            /**\n             * Ui elements expected to be in client UI.\n             */\n            this.Ui = {\n                $mapBox:null,\n                $listBox:null\n            };\n\n            /**\n             * Initialize the map object with needed settings.\n             * @param opts {Object} : apiKey, language, mapElemID, messageListElemID\n             */\n            this.ini=function (opts) {\n                this.apiKey = opts.apiKey;\n                this.language = opts.language;\n                this.mapElemID = opts.mapElemID;\n                this.messageListElemID = opts.messageListElemID;\n\n                //for China, changes the api url domain\n                if(this.language==='zh-CN')\n                    this.googleDomain = this.googleDomains['zh-CN'];\n                else\n                    this.googleDomain = this.googleDomains.general;\n\n                //HTML rendered, so lets instantiate the UI\n                this.Ui.$mapBox = $('#'+this.mapElemID);\n                this.Ui.$listBox = $('#'+this.messageListElemID);\n\n                //apply style to map container before creating the map (if any)\n                if(!$.isNumeric(opts.mapHeight) || opts.mapHeight<=0)\n                    opts.mapHeight = 30; //default value needed\n\n                this.Ui.$mapBox.css('height', (opts.mapHeight+'rem'));\n            };\n\n            /**\n             * Loads google maps script (if not available yet), creates\n             * the map instance and returns to client.\n             * @param callback {Function}: (map).\n             */\n            this.load=function (callback){\n                var _this = this;\n\n                if(window.google && window.google.maps)\n                    return callback(this.createMap(this.Ui.$mapBox.attr('id')));\n                else\n                {\n                    this.mapReadyObservers.push({\n                        mapWrapperInstance:this,\n                        callback:callback\n                    });\n\n                    if(this.mapReadyObservers.length===1){\n                        var script = document.createElement('script');\n                        script.type = 'text/javascript';\n                        script.async = true;\n                        script.onload = function(){\n                            _this.onMapAPILoaded(_this);\n                        };\n                        script.src = 'https://'+this.googleDomain+'/maps/api/js?&key='+this.apiKey+'&language='+this.language+'&libraries=places';\n                        document.querySelector('head').appendChild(script);\n                    }\n\n                }\n            };\n\n            /**\n             * Creates and returns the google map geodecoder.\n             * @returns {Object}\n             */\n            this.getGeocoder=function () {\n                if(!this.geocoder)\n                    this.geocoder = new google.maps.Geocoder();\n\n                return this.geocoder;\n            };\n\n            /**\n             * Creates and returns the google map marker InfoWindow.\n             * @returns {Object}\n             */\n            this.getInfoWindow=function () {\n                if(!this.infowindow)\n                    this.infowindow = new google.maps.InfoWindow();\n\n                return this.infowindow;\n            };\n\n            /**\n             * Creates and set the map on wrapper.\n             * @param elemId {String}: id of the HTML element that will host the map on client UI.\n             * @param [opts] {Object}: google map creation options. Has some default.\n             * @returns {Object}\n             */\n            this.createMap=function (elemId, opts) {\n                if(!opts) opts = {\n                    center: {lat: -33.8688, lng: 151.2195},\n                    zoom: 13,\n                    mapTypeId: 'roadmap'\n                };\n\n                this.map = new google.maps.Map(document.getElementById(elemId), opts);\n\n                return this.map;\n            };\n\n            /**\n             * Add places to the map by clickable markers.\n             * @param places {Array}: string array of querying places (addresses or names of places)\n             * @param [markerClickCallback] {Function}: callback function to invoke when a marker gets clicked.\n             */\n            this.addPlaces=function (places, markerClickCallback) {\n\n                //the function to be invoked when a place marker gets clicked by the user\n                var _markerClickCallback = function (marker,totalFoundPlaces) {\n                    if(markerClickCallback)\n                        markerClickCallback(marker,totalFoundPlaces);\n                };\n\n                //found places will be decreased if some\n                //places are not found by google maps\n                this.foundPlaces = places.length;\n                this.requestedPlaces = places.length;\n\n                this.getGeocoder();\n\n                var _this = this;\n                $(places).each(function (i, item) {\n                    //looks for a place based on model address\n                    _this.geocoder.geocode({address: item.address}, function (results,status) {\n                        switch (status){\n                            //place found, add a marker icon with click behaviour\n                            case _this.geoCodeStatus.OK:\n                                //defines the callback on current marker to be invoked on click\n                                item.callback = _markerClickCallback;\n                                for(var r in results)\n                                    _this.addMarker(results[r], item);\n\n                                //alerts the editor that the address string is probably too generic\n                                if(results.length>1)\n                                    alert('Found multiple results for address '+item.address);\n                                break;\n\n                            //place address doesn't correspond to any google\n                            //known place, display a message to the editor\n                            //to change the place query\n                            case _this.geoCodeStatus.ZERO_RESULTS:\n                                _this.foundPlaces--;\n                                _this.Ui.$listBox.find('ul').append('<li>'+item.address+'</li>');\n                                break;\n\n                            //any other error case, logged and alerts\n                            // the users (both editor or learner)\n                            default:\n                                _this.foundPlaces--;\n                                console.error('adapt-interactiveMapPlaces: geodecode status '+status);\n                                alert('Error looking to address '+item.address+' on Google Maps.');\n                        }\n\n                        //when all markers are displayed on map\n                        //make sure to zoom the map to have them\n                        //visible to the user\n                        _this.displayMarkersOnCompleted();\n\n                        //displays the alert box when some places couldn't be found\n                        _this.Ui.$listBox.css({display:((_this.foundPlaces!==_this.requestedPlaces) ? \"block\" : \"none\")});\n                    });\n                });\n            };\n\n            /**\n             * Add a marker to the map, makes it clickable and sets his info window contents.\n             * @param markerData {Object}: a single item result of a query to google map geocoder.geocode() function. See addPlaces().\n             * @param otherInfo {Object}: [content] {String}, [extreference] {String}, [picture] {string}.\n             */\n            this.addMarker=function (markerData,otherInfo) {\n                var marker = new google.maps.Marker({\n                    position: markerData.geometry.location,\n                    map: this.map,\n                    title: markerData.formatted_address\n                });\n\n                //set a unique id to the marker to identify it on UI if needed\n                marker.set('id', Date.now().toString());\n\n                //sets a default content for the window object\n                otherInfo.content = otherInfo.content || '(No content)';\n\n                //when picture is available adds it to content\n                //with a link to open it in a new tab\n                if(otherInfo.picture)\n                    otherInfo.content = otherInfo.content +\n                        '<p>' +\n                            '<a href=\"'+otherInfo.picture+'\" target=\"_blank\">' +\n                                '<img src=\"'+otherInfo.picture+'\" style=\"width: 100%;\"/>' +\n                            '</a>' +\n                        '</p>';\n\n                //when an external URL reference is available adds it to content\n                //with a link to open it in a new tab\n                if(otherInfo.extreference)\n                    otherInfo.content = otherInfo.content +\n                        '<p>' +\n                            '<a href=\"'+otherInfo.extreference+'\" target=\"_blank\">'+otherInfo.extreference+'</a>' +\n                        '</p>';\n\n\n                //attaches the event listener for marker clicking\n                var _this = this;\n                google.maps.event.addListener(marker, 'click', function() {\n                    var infowindow = _this.getInfoWindow();\n                    infowindow.setContent(otherInfo.content);\n                    infowindow.open(_this.map,marker);\n                    otherInfo.callback(marker,_this.foundPlaces);\n                });\n\n                //tracks all added markers\n                this.markers.push(marker);\n            };\n\n            /**\n             * Fit the map zoom to display all markers\n             */\n            this.displayMarkersOnCompleted=function () {\n                if(this.markers.length===this.foundPlaces){\n                    var bounds = new google.maps.LatLngBounds();\n                    for (var m in this.markers)\n                        bounds.extend(this.markers[m].getPosition());\n\n                    //center the map to the geometric center of all markers\n                    this.map.setCenter(bounds.getCenter());\n                    this.map.fitBounds(bounds);\n\n                    //sets teh best zoom possible to display all markers\n                    if(this.markers.length===1)\n                        this.map.setZoom(this.map.getZoom()-5);\n                    else\n                    //remove one zoom level to ensure no marker is on the edge.\n                        this.map.setZoom(this.map.getZoom()-1);\n\n                    //clean\n                    this.markers = [];\n                }\n            }\n        };\n\n    /**\n     * List of observers to be notified when\n     * when the Google Maps API is ready to use.\n     * @type {Array}: mapWrapperInstance {MapWrapper}, callback {function}\n     */\n    MapWrapper.prototype.mapReadyObservers = [];\n\n    /**\n     * Invoked when the Google Maps script is included\n     * and fully loaded.\n     * @param mapWrapper {MapWrapper}: instance of MapWrapper\n     */\n    MapWrapper.prototype.onMapAPILoaded = function(mapWrapper){\n        for(var i in mapWrapper.mapReadyObservers){\n            var obs = mapWrapper.mapReadyObservers[i];\n            //creates the google maps instance with-in the\n            //the ui map box when script is ready\n            obs.mapWrapperInstance.createMap(obs.mapWrapperInstance.Ui.$mapBox.attr('id'));\n            //invokes the callbacks on each map api ready listener\n            obs.callback(obs.mapWrapperInstance.map);\n        }\n    };\n\n    return MapWrapper;\n});\n",
    "/**\n * Adapt Learning component to display interactive\n * maps based on Google Maps service.\n * The component displays a list of places on\n * the map, each place is clickable and displays\n * a custom content.\n *\n * @author Fabio Beoni: https://github.com/fabiobeoni | https://it.linkedin.com/in/fabio-beoni-6a7848101\n */\ndefine('components/adaptInteractiveMapPlaces/js/component',['require','coreViews/componentView','coreJS/adapt','../libraries/Utils','../libraries/MapWrapper'],function(require) {\n\n    //adapt api modules\n    var ComponentView = require('coreViews/componentView');\n    var Adapt = require('coreJS/adapt');\n\n    //general js utility\n    var Utils = require('../libraries/Utils');\n\n    //the map manager who wraps the\n    //google maps API and exposes\n    //only domain specific features\n    var MapWrapper = require('../libraries/MapWrapper');\n\n    //model fields and other constants\n    var F = {\n        MAP_TAG : 'interactiveMapPlaces-map-', //ui tag\n        INVALID_ADDRESS_LIST_TAG : '-invalid-list', //ui tag\n        UNIQUE_NAME:'uniqueName', //model field: map unique name on ui\n        MAP_ID:'mapId', //model field: auto generated guid for the map ui tag\n        MAP_HEIGHT:'mapHeight', //model field: the height of the map box on ui\n        ITEMS:'_items', //model field: the list of places to be displayed\n        API_KEY:'apiKey', //model field: the API key to contact Google Maps\n        LANGUAGE:'language', //model field: the language to display on map\n        ENABLE_COMPLETION_ON_CLICK:'enableCompletionOnClick', //model field: boolean, true to ask Adap to track component completion only when the user has clicked on all places displayed on map\n        CLICKED_MARKERS : 'clickedMarkers' //model field: stores the amount of marker places clicked by the user to count them and check for completion of the component\n    };\n\n    //The current component, for return statement\n    //extending default adapt view component.\n    //This definition is reused by the API between\n    //many instances on the page, while overrides\n    //of component methods can access instance\n    //specific data (like data model)\n    var component = ComponentView.extend({\n\n        preRender: function () {\n\n            //first of all checks that the editor\n            //setup the API key needed by Google Map\n            //(XXXXXXXX is the default value)\n            var mapAPIKey = this.model.get(F.API_KEY);\n            if(!mapAPIKey || mapAPIKey.trim().length===0 || mapAPIKey==='XXXXXXXX')\n            {\n                alert('You must provide a Google Maps API Key to display maps with this component.');\n                return;\n            }\n\n            //create a model prop to track user\n            //clicks on map markers, used later on\n            //to verify if all markers have been clicked\n            this.model.set(F.CLICKED_MARKERS, []);\n\n            //updates the model with a unique map ID needed to\n            //select it with-in the document if other instances\n            //of the component are there too\n            this.model.set(F.MAP_ID, (F.MAP_TAG + Utils.guid()));\n        },\n\n        postRender: function () {\n            var self = this;\n\n            //initializes a MapWrapper and passes\n            //specific component model data object\n            //to render and manage the map\n            var mapWrapper = new MapWrapper();\n            mapWrapper.ini({\n                apiKey:this.model.get(F.API_KEY),\n                language:this.model.get(F.LANGUAGE),\n                mapElemID:this.model.get(F.MAP_ID),\n                messageListElemID: this.model.get(F.MAP_ID) + F.INVALID_ADDRESS_LIST_TAG,\n                mapHeight:this.model.get(F.MAP_HEIGHT)\n            });\n\n            //Google Maps script is actually loaded once, multiple\n            //instances of the component get a cached reference to it\n            mapWrapper.load(function (map) {\n                if(map)\n                {\n                    //has the map, so now add all provided places to it\n                    //and registers a click listener for each one\n                    //that will track click performed\n                    mapWrapper.addPlaces(self.model.get(F.ITEMS),function(marker, foundPlaces){\n                        self.trackMarkerClick(marker, foundPlaces);\n                    });\n\n                    //set the component completion status to true\n                    //when the user is not requested to click on\n                    //on each marker to complete the component\n                    if(!self.model.get(F.ENABLE_COMPLETION_ON_CLICK))\n                        self.completeComponent();\n                }\n                else\n                    alert('Cannot initialize the map as requested');\n\n\n                self.setReadyStatus();\n            });\n        },\n\n        /**\n         * Function invoked when the user clicks on a marker on the map.\n         * When enabled, this function checks that all markers have been clicked\n         * and fires the completion call back when all are selected.\n         * @param marker {Object}: google maps marker instance firing the on click event\n         * @param foundPlaces {number}\n         */\n        trackMarkerClick:function(marker, foundPlaces){\n            var clickedMarkers = this.model.get(F.CLICKED_MARKERS);\n            if(this.model.get(F.ENABLE_COMPLETION_ON_CLICK)){\n                //checks the marker by id, a guid attached\n                //on marker creation, add only once to the list\n                var markerId = marker.get('id');\n                if(clickedMarkers.indexOf(markerId)===-1)\n                    clickedMarkers.push(markerId);\n\n                //when all markers are clicked, fires the completion\n                if(clickedMarkers.length===foundPlaces){\n                    this.completeComponent(); //\n                }\n            }\n        },\n        completeComponent:function () {\n            try{\n                this.setCompletionStatus();\n            }\n            catch (err){\n                console.error(err);\n            }\n        }\n\n    });\n\n    Adapt.register('adaptInteractiveMapPlaces', component);\n\n    return component;\n});\n\n",
    "define('extensions/adapt-contrib-drawerPageNavigation/js/adapt-contrib-drawerPageNavigationView',['require','backbone','coreJS/adapt'],function(require) {\n\n    var Backbone = require('backbone');\n    var Adapt = require('coreJS/adapt');\n\n    var DrawerPageNavigationView = Backbone.View.extend({\n\n        className: \"drawerPageNavigation\",\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .contentObjects-item-container button': 'onContentObjectMenuClicked'\n        },\n\n        render: function() {\n            var collectionData = this.collection.toJSON();\n            var modelData = this.model.toJSON();\n            var template = Handlebars.templates[\"contentObjects\"];\n            this.$el.html(template({model: modelData, resources: collectionData, _globals: Adapt.course.get('_globals')}));\n            _.defer(_.bind(this.postRender, this));\n            return this;\n        },\n\n        postRender: function() {\n            this.listenTo(Adapt, 'drawer:triggerCustomView', this.remove);\n        },\n\n        onContentObjectMenuClicked: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            if(this.model.get('_isLocked')) return;\n            Backbone.history.navigate('#/id/' + $(event.currentTarget).data(\"href\"), {trigger: true});\n        }\n    });\n\n    return DrawerPageNavigationView;\n})\n;\n",
    "define('extensions/adapt-contrib-drawerPageNavigation/js/adapt-contrib-drawerPageNavigation',[\n    'backbone',\n    'coreJS/adapt',\n    './adapt-contrib-drawerPageNavigationView'\n], function(Backbone, Adapt, DrawerPageNavigationView) {\n\n    function setupMenu(contentObjectsModel, contentObjectsItems) {\n\n        var contentObjectsCollection = new Backbone.Collection(contentObjectsItems);\n        var contentObjectsModel = new Backbone.Model(contentObjectsModel);\n\n        Adapt.on('drawerPageNavigation:showContentObjects', function() {\n            Adapt.drawer.triggerCustomView(new DrawerPageNavigationView({\n                model: contentObjectsModel,\n                collection: contentObjectsCollection\n            }).$el);\n        });\n\n    }\n\n    Adapt.once('app:dataReady', function() {\n\n        var drawerPageNavigationData = Adapt.course.get('_drawerPageNavigation');\n        var contentObjectItems = Adapt.contentObjects.models;\n\n        // do not proceed until resource set on course.json\n        if (!contentObjectItems || drawerPageNavigationData._isEnabled === false) return;\n\n        var drawerObject = {\n            title: drawerPageNavigationData.title,\n            description: drawerPageNavigationData.description,\n            className: 'pageNavigation-drawer'\n        };\n        // Syntax for adding a Drawer item\n        // Adapt.drawer.addItem([object], [callbackEvent]);\n        Adapt.drawer.addItem(drawerObject, 'drawerPageNavigation:showContentObjects');\n\n        setupMenu(drawerPageNavigationData, contentObjectItems);\n\n    });\n\n});\n\n",
    "define('extensions/adapt-contrib-languagePicker/js/accessibilityView',[\n    'core/js/adapt'\n], function(Adapt) {\n\n    var AccessibilityView = Backbone.View.extend({\n\n        el: '#accessibility-toggle',\n\n        events: {\n            'click' : 'toggleAccessibility'\n        },\n\n        initialize: function() {\n            this.setupHelpers();\n\n            this.setupUsageInstructions();\n\n            if(Adapt.offlineStorage.ready) {\n                this.onOfflineStorageReady();\n            } else {\n                Adapt.once('offlineStorage:ready', _.bind(this.onOfflineStorageReady, this));\n            }\n        },\n\n        onOfflineStorageReady: function() {\n            Adapt.config.get(\"_accessibility\")._isActive = Adapt.offlineStorage.get('a11y') || false;\n\n            this.configureAccessibility();\n\n            this.render();\n        },\n\n        render: function() {\n            var hasAccessibility = Adapt.config.has('_accessibility')\n                && Adapt.config.get('_accessibility')._isEnabled;\n\n            if (!hasAccessibility) {\n                return;\n            } else {\n                var isActive = Adapt.config.get('_accessibility')._isActive;\n                var offLabel = this.model.get(\"_accessibility\") && this.model.get(\"_accessibility\").accessibilityToggleTextOff;\n                var onLabel = this.model.get(\"_accessibility\") && this.model.get(\"_accessibility\").accessibilityToggleTextOn;\n\n                var toggleText = isActive ? offLabel : onLabel;\n\n                this.$el.html(toggleText).attr('aria-label', $.a11y_normalize(toggleText));\n\n                if (isActive) {\n                    $(\"html\").addClass('accessibility');\n                    $(\"#accessibility-instructions\").a11y_focus();\n                } else {\n                    $(\"html\").removeClass('accessibility');\n                }\n            }\n        },\n\n        toggleAccessibility: function(event) {\n            if(event) event.preventDefault();\n\n            var hasAccessibility = Adapt.config.get('_accessibility')._isActive;\n\n            var toggleAccessibility = (hasAccessibility) ? false : true;\n\n            Adapt.config.get('_accessibility')._isActive = toggleAccessibility;\n\n            this.configureAccessibility();\n\n            this.setupUsageInstructions();\n\n            this.render();\n\n            this.trigger('accessibility:toggle');\n        },\n\n        setupHelpers: function() {\n            var config = Adapt.config.get(\"_accessibility\");\n\n            Handlebars.registerHelper('a11y_text', function(text) {\n                //ALLOW ENABLE/DISABLE OF a11y_text HELPER\n                if (config && config._isTextProcessorEnabled === false) {\n                    return text;\n                } else {\n                    return $.a11y_text(text);\n                }\n            });\n        },\n\n        configureAccessibility: function() {\n\n            var isActive = Adapt.config.get('_accessibility')._isActive;\n\n            if (!Modernizr.touch && (Adapt.offlineStorage.get('a11y') !== isActive)) {\n                Adapt.offlineStorage.set(\"a11y\", isActive);\n            }\n\n            if (isActive) {\n\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: true,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: true,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: true,\n                    isAlertsEnabled: true\n                });\n            } else {\n                _.extend($.a11y.options, {\n                    isTabbableTextEnabled: false,\n                    isUserInputControlEnabled: true,\n                    isFocusControlEnabled: true,\n                    isFocusLimited: false,\n                    isRemoveNotAccessiblesEnabled: true,\n                    isAriaLabelFixEnabled: true,\n                    isFocusWrapEnabled: true,\n                    isScrollDisableEnabled: true,\n                    isScrollDisabledOnPopupEnabled: false,\n                    isSelectedAlertsEnabled: false,\n                    isAlertsEnabled: false\n                });\n            }\n\n            $.a11y.ready();\n        },\n\n        setupUsageInstructions: function() {\n            if (!this.model.get(\"_accessibility\") || !this.model.get(\"_accessibility\")._accessibilityInstructions) {\n                $(\"#accessibility-instructions\").remove();\n                return;\n            }\n\n            var instructionsList =  this.model.get(\"_accessibility\")._accessibilityInstructions;\n\n            var usageInstructions;\n            if (instructionsList[Adapt.device.browser]) {\n                usageInstructions = instructionsList[Adapt.device.browser];\n            } else if (Modernizr.touch) {\n                usageInstructions = instructionsList.touch || \"\";\n            } else {\n                usageInstructions = instructionsList.notouch || \"\";\n            }\n\n           $(\"#accessibility-instructions\").html( usageInstructions );\n        }\n\n    });\n\n    return AccessibilityView;\n\n});\n",
    "define('extensions/adapt-contrib-languagePicker/js/languagePickerView',[\n    'core/js/adapt',\n    './accessibilityView'\n], function(Adapt, accessibilityView) {\n    \n    var LanguagePickerView = Backbone.View.extend({\n        \n        events: {\n            'click .languagepicker-languages button': 'onLanguageClick'\n        },\n        \n        className: 'languagepicker',\n        \n        initialize: function () {\n            this.initializeAccessibility();\n            $(\"html\").addClass(\"in-languagepicker\");\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n        \n        render: function () {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n            this.$el.addClass(data._classes);\n\n            document.title = this.model.get('title') || \"\";\n            \n            _.defer(_.bind(function () {\n                this.postRender();\n            }, this));\n        },\n        \n        postRender: function () {\n            $('.loading').hide();\n        },\n        \n        onLanguageClick: function (event) {\n            this.destroyAccessibility();\n            this.model.setLanguage($(event.target).val());\n        },\n\n        initializeAccessibility: function() {\n            this.accessibilityView = new accessibilityView({\n                model:this.model\n            });\n            \n            // we need to re-render if accessibility gets switched on\n            this.listenTo(this.accessibilityView, 'accessibility:toggle', this.render);\n        },\n\n        destroyAccessibility: function() {\n            this.accessibilityView.remove();\n        },\n\n        remove: function() {\n            $(\"html\").removeClass(\"in-languagepicker\");\n\n            Backbone.View.prototype.remove.apply(this, arguments);\n        }\n        \n    }, {\n        template: 'languagePickerView'\n    });\n\n    return LanguagePickerView;\n\n});\n\n",
    "define('extensions/adapt-contrib-languagePicker/js/languagePickerDrawerView',[\n    'core/js/adapt',\n    'backbone'\n], function(Adapt, Backbone) {\n    \n    var LanguagePickerDrawerView = Backbone.View.extend({\n        \n        events: {\n            'click button': 'onButtonClick'\n        },\n        \n        initialize: function () {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(Adapt, 'languagepicker:changelanguage:yes', this.onDoChangeLanguage);\n            this.listenTo(Adapt, 'languagepicker:changelanguage:no', this.onDontChangeLanguage);\n            this.render();\n        },\n        \n        render: function () {\n            var data = this.model.toJSON();\n            var template = Handlebars.templates[this.constructor.template];\n            this.$el.html(template(data));\n        },\n        \n        onButtonClick: function (event) {\n            var newLanguage = $(event.target).attr('data-language');\n            this.model.set('newLanguage', newLanguage);\n            var data = this.model.getLanguageDetails(newLanguage);\n            \n            var promptObject = {\n                _classes: \"dir-ltr\",\n                title: data.warningTitle,\n                body: data.warningMessage,\n                _prompts:[\n                    {\n                        promptText: data._buttons.yes,\n                        _callbackEvent: \"languagepicker:changelanguage:yes\"\n                    },\n                    {\n                        promptText: data._buttons.no,\n                        _callbackEvent: \"languagepicker:changelanguage:no\"\n                    }\n                ],\n                _showIcon: true\n            };\n\n            if (data._direction === 'rtl') {\n                promptObject._classes = \"dir-rtl\";\n            }\n            \n            //keep active element incase the user cancels - usually navigation bar icon\n            this.$finishFocus = $.a11y.state.focusStack.pop();\n            //move drawer close focus to #focuser\n            $.a11y.state.focusStack.push($(\"#focuser\"));\n\n            Adapt.once('drawer:closed', function() {\n                //wait for drawer to fully close\n                _.delay(function(){\n                    //show yes/no popup\n                    Adapt.once('popup:opened', function() {\n                        //move popup close focus to #focuser\n                        $.a11y.state.focusStack.pop();\n                        $.a11y.state.focusStack.push($(\"#focuser\"));\n                    });\n\n                    Adapt.trigger('notify:prompt', promptObject);\n                }, 250);\n            });\n\n            Adapt.trigger('drawer:closeDrawer');\n        },\n        \n        onDoChangeLanguage: function () {\n            // set default languge\n            var newLanguage = this.model.get('newLanguage');\n            this.model.setLanguage(newLanguage);\n            this.remove();\n        },\n        \n        onDontChangeLanguage: function () {\n            this.remove();\n\n            //wait for notify to close fully\n            _.delay(_.bind(function(){\n                //focus on navigation bar icon\n                this.$finishFocus.a11y_focus();\n            }, this), 500);\n\n        }\n        \n    }, {\n        template: 'languagePickerDrawerView'\n    });\n\n    return LanguagePickerDrawerView;\n\n});\n\n",
    "define('extensions/adapt-contrib-languagePicker/js/languagePickerNavView',[\n    'core/js/adapt',\n    'backbone',\n    './languagePickerDrawerView'\n], function(Adapt, Backbone, LanguagePickerDrawerView) {\n    \n    var LanguagePickerNavView = Backbone.View.extend({\n        \n        tagName: 'button',\n        \n        className: function () {\n            var classNames = 'languagepicker-icon base icon';\n            var customClass = this.model.get('_languagePickerIconClass') || 'icon-language-2';\n\n            return classNames + ' ' + customClass;\n        },\n        \n        events: {\n            'click': 'onClick'\n        },\n        \n        initialize: function () {\n            this.listenTo(Adapt, 'remove', this.remove);\n        },\n        \n        onClick: function (event) {\n            Adapt.drawer.triggerCustomView(new LanguagePickerDrawerView({model: this.model}).$el, false);\n        }\n        \n    });\n\n    return LanguagePickerNavView;\n\n});\n\n",
    "define('extensions/adapt-contrib-languagePicker/js/languagePickerModel',[\n        'core/js/adapt',\n        'backbone'\n], function (Adapt, Backbone) {\n    \n    var LanguagePickerModel = Backbone.Model.extend({\n        \n        defaults: {\n            \"_isEnabled\": false,\n            \"displayTitle\": \"\",\n            \"body\": \"\",\n            \"_languages\": []\n        },\n        \n        initialize: function () {\n            this.listenTo(Adapt.config, 'change:_activeLanguage', this.onConfigChange);\n        },\n\n        getLanguageDetails: function (language) {\n            var _languages = this.get('_languages');\n            return _.find(_languages, function (item) {\n                return (item._language == language);\n            });\n        },\n\n        setLanguage: function (language) {\n            Adapt.config.set({\n                '_activeLanguage': language,\n                '_defaultDirection': this.getLanguageDetails(language)._direction\n            });\n        },\n        \n        onConfigChange: function (model, value, options) {\n            this.markLanguageAsSelected(value);\n        },\n        \n        markLanguageAsSelected: function(language) {\n            var languages = this.get('_languages');\n\n            for (var i = 0; i < languages.length; i++) {\n                if (languages[i]._language === language) {\n                    languages[i]._isSelected = true;\n                } else {\n                    languages[i]._isSelected = false;\n                }\n            }\n\n            this.set('_languages', languages);\n        }\n        \n    });\n    \n    return LanguagePickerModel;\n    \n});\n\n",
    "define('extensions/adapt-contrib-languagePicker/js/adapt-languagePicker',[\n    'core/js/adapt',\n    'backbone',\n    './languagePickerView',\n    './languagePickerNavView',\n    './languagePickerModel'\n], function(Adapt, Backbone, LanguagePickerView, LanguagePickerNavView, LanguagePickerModel) {\n\n    var languagePickerModel;\n\n    Adapt.once('configModel:dataLoaded', onConfigLoaded);\n\n    /**\n     * Once the Adapt config has loaded, check to see if the language picker is enabled. If it is:\n     * - stop the rest of the .json from loading\n     * - set up the language picker model\n     * - register for events to allow us to display the language picker icon in the navbar on pages and menus\n     * - wait for offline storage to be ready so that we can check to see if there's a stored language choice or not\n     */\n    function onConfigLoaded() {\n        if (!Adapt.config.has('_languagePicker')) return;\n        if (!Adapt.config.get('_languagePicker')._isEnabled) return;\n    \n        Adapt.config.set(\"_canLoadData\", false);\n\n        languagePickerModel = new LanguagePickerModel(Adapt.config.get('_languagePicker'));\n        \n        Adapt.on('router:page', setupNavigationView);\n        Adapt.on('router:menu', setupNavigationView);\n            \n        if(Adapt.offlineStorage.ready) {// on the offchance that it may already be ready...\n            onOfflineStorageReady();\n        } else {\n            Adapt.once('offlineStorage:ready', onOfflineStorageReady);\n        }\n    }\n\n    /**\n     * Once offline storage is ready, check to see if a language was previously selected by the user\n     * If it was, load it. If it wasn't, show the language picker\n     */\n    function onOfflineStorageReady() {\n        var storedLanguage = Adapt.offlineStorage.get(\"lang\");\n\n        if (storedLanguage) {\n            languagePickerModel.setLanguage(storedLanguage);\n        } else if (languagePickerModel.get('_showOnCourseLoad') === false) {\n            languagePickerModel.setLanguage(Adapt.config.get('_defaultLanguage'));\n        } else {\n            showLanguagePickerView();\n        }\n    }\n\n    function showLanguagePickerView () {\n        var languagePickerView = new LanguagePickerView({\n            model: languagePickerModel\n        });\n        \n        languagePickerView.$el.appendTo('#wrapper');\n    }\n    \n    function setupNavigationView () {\n        /* \n         * On the framework this isn't an issue, but courses built in the authoring tool before the ARIA label \n         * was added will break unless the extension is removed then added again.\n         */\n        var courseGlobals = Adapt.course.get('_globals')._extensions;\n        var navigationBarLabel = '';\n        if (courseGlobals._languagePicker) {\n            navigationBarLabel = courseGlobals._languagePicker.navigationBarLabel;\n        }\n\n        var languagePickerNavView = new LanguagePickerNavView({\n            model: languagePickerModel,\n            attributes:  {\n                \"aria-label\": navigationBarLabel\n            }\n        });\n        \n        languagePickerNavView.$el.appendTo('.navigation-inner');\n    }\n    \n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/completionCalculations',[\n    'coreJS/adapt'\n], function(Adapt) {\n    \n    // Calculate completion of a contentObject\n    function calculateCompletion(contentObjectModel) {\n\n        var viewType = contentObjectModel.get('_type'),\n            nonAssessmentComponentsTotal = 0,\n            nonAssessmentComponentsCompleted = 0,\n            assessmentComponentsTotal = 0,\n            assessmentComponentsCompleted = 0,\n            subProgressCompleted = 0,\n            subProgressTotal = 0,\n            isComplete = contentObjectModel.get(\"_isComplete\") ? 1 : 0;\n\n        // If it's a page\n        if (viewType == 'page') {\n            var children = contentObjectModel.findDescendants('components').where({'_isAvailable': true, '_isOptional': false});\n\n            var availableChildren = filterAvailableChildren(children);\n            var components = getPageLevelProgressEnabledModels(availableChildren);\n\n            var nonAssessmentComponents = getNonAssessmentComponents(components);\n\n            nonAssessmentComponentsTotal = nonAssessmentComponents.length | 0,\n            nonAssessmentComponentsCompleted = getComponentsCompleted(nonAssessmentComponents).length;\n\n            var assessmentComponents = getAssessmentComponents(components);\n\n            assessmentComponentsTotal = assessmentComponents.length | 0,\n            assessmentComponentsCompleted = getComponentsInteractionCompleted(assessmentComponents).length;\n\n            subProgressCompleted = contentObjectModel.get(\"_subProgressComplete\") || 0;\n            subProgressTotal = contentObjectModel.get(\"_subProgressTotal\") || 0;\n\n            var pageCompletion = {\n                \"subProgressCompleted\": subProgressCompleted,\n                \"subProgressTotal\": subProgressTotal,\n                \"nonAssessmentCompleted\": nonAssessmentComponentsCompleted,\n                \"nonAssessmentTotal\": nonAssessmentComponentsTotal,\n                \"assessmentCompleted\": assessmentComponentsCompleted,\n                \"assessmentTotal\": assessmentComponentsTotal\n            };\n\n            if (contentObjectModel.get(\"_pageLevelProgress\") && contentObjectModel.get(\"_pageLevelProgress\")._showPageCompletion !== false \n                && Adapt.course.get(\"_pageLevelProgress\") && Adapt.course.get(\"_pageLevelProgress\")._showPageCompletion !== false) {\n                //optionally add one point extra for page completion to eliminate incomplete pages and full progress bars\n                // if _showPageCompletion is true then the progress bar should also consider it so add 1 to nonAssessmentTotal\n                pageCompletion.nonAssessmentCompleted += isComplete;\n                pageCompletion.nonAssessmentTotal += 1;\n            }\n\n            return pageCompletion;\n        }\n        // If it's a sub-menu\n        else if (viewType == 'menu') {\n\n            _.each(contentObjectModel.get('_children').models, function(contentObject) {\n                var completionObject = calculateCompletion(contentObject);\n                subProgressCompleted += contentObjectModel.subProgressCompleted || 0;\n                subProgressTotal += contentObjectModel.subProgressTotal || 0;\n                nonAssessmentComponentsTotal += completionObject.nonAssessmentTotal;\n                nonAssessmentComponentsCompleted += completionObject.nonAssessmentCompleted;\n                assessmentComponentsTotal += completionObject.assessmentTotal;\n                assessmentComponentsCompleted += completionObject.assessmentCompleted;\n            });\n\n            return {\n                \"subProgressCompleted\": subProgressCompleted,\n                \"subProgressTotal\" : subProgressTotal,\n                \"nonAssessmentCompleted\": nonAssessmentComponentsCompleted,\n                \"nonAssessmentTotal\": nonAssessmentComponentsTotal,\n                \"assessmentCompleted\": assessmentComponentsCompleted,\n                \"assessmentTotal\": assessmentComponentsTotal,\n            };\n        }\n    }\n\n    function getNonAssessmentComponents(models) {\n        return _.filter(models, function(model) {\n            return !model.get('_isPartOfAssessment');\n        });\n    }\n\n    function getAssessmentComponents(models) {\n        return _.filter(models, function(model) {\n            return model.get('_isPartOfAssessment');\n        });\n    }\n\n    function getComponentsCompleted(models) {\n        return _.filter(models, function(item) {\n            return item.get('_isComplete');\n        });\n    }\n\n    function getComponentsInteractionCompleted(models) {\n        return _.filter(models, function(item) {\n            return item.get('_isComplete');\n        });\n    }\n\n    //Get only those models who were enabled for pageLevelProgress\n    function getPageLevelProgressEnabledModels(models) {\n        return _.filter(models, function(model) {\n            if (model.get('_pageLevelProgress')) {\n                return model.get('_pageLevelProgress')._isEnabled;\n            }\n        });\n    }\n\n    function unavailableInHierarchy(parents) {\n        if (parents.length > 0) {\n            var parentsAvailable = _.map(parents, function(parent) {\n                return parent.get('_isAvailable');\n            });\n            return _.indexOf(parentsAvailable, false) > -1;\n        } else {\n            return;\n        }\n    }\n\n    function filterAvailableChildren(children) {\n        var availableChildren = [];\n\n        for(var child=0; child < children.length; child++) {\n            var parents = children[child].getParents().models;\n            if (!unavailableInHierarchy(parents)) {\n                availableChildren.push(children[child]);\n            }\n        }\n\n        return availableChildren;\n    }\n\n    return {\n    \tcalculateCompletion: calculateCompletion,\n    \tgetPageLevelProgressEnabledModels: getPageLevelProgressEnabledModels,\n        filterAvailableChildren: filterAvailableChildren\n    };\n\n})\n;\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView',['require','coreJS/adapt','backbone'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n\n    var PageLevelProgressMenuView = Backbone.View.extend({\n\n        className: 'page-level-progress-menu-item',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n\n            this.ariaText = '';\n            if (Adapt.course.get('_globals')._extensions && Adapt.course.get('_globals')._extensions._pageLevelProgress && Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar) {\n                this.ariaText = Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressMenuBar + ' ';\n            }\n\n            this.render();\n\n            _.defer(_.bind(function() {\n                this.updateProgressBar();\n            }, this));\n        },\n\n        events: {\n        },\n\n        render: function() {\n            var data = this.model.toJSON();\n            _.extend(data, {\n                _globals: Adapt.course.get('_globals')\n            });\n            var template = Handlebars.templates['pageLevelProgressMenu'];\n\n            this.$el.html(template(data));\n            return this;\n        },\n\n        updateProgressBar: function() {\n            if (this.model.get('completedChildrenAsPercentage')) {\n                var percentageOfCompleteComponents = this.model.get('completedChildrenAsPercentage');\n            } else {\n                var percentageOfCompleteComponents = 0;\n            }\n\n            // Add percentage of completed components as an aria label attribute\n            this.$('.page-level-progress-menu-item-indicator-bar .aria-label').html(this.ariaText + Math.floor(percentageOfCompleteComponents) + '%');\n\n        },\n\n    });\n\n    return PageLevelProgressMenuView;\n\n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView',['require','coreJS/adapt','backbone'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n\n    var PageLevelProgressView = Backbone.View.extend({\n\n        className: 'page-level-progress',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .page-level-progress-item button': 'scrollToPageElement'\n        },\n\n        scrollToPageElement: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            var currentComponentSelector = '.' + $(event.currentTarget).attr('data-page-level-progress-id');\n            var $currentComponent = $(currentComponentSelector);\n            Adapt.once('drawer:closed', function() {\n                Adapt.scrollTo($currentComponent, { duration:400 });\n            });\n            Adapt.trigger('drawer:closeDrawer');\n        },\n\n        render: function() {\n            var components = this.collection.toJSON();\n            var data = {\n                components: components,\n                _globals: Adapt.course.get('_globals')\n            };\n            var template = Handlebars.templates['pageLevelProgress'];\n            this.$el.html(template(data));\n            this.$el.a11y_aria_label(true);\n            return this;\n        }\n\n    });\n\n    return PageLevelProgressView;\n\n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView',['require','coreJS/adapt','backbone','./completionCalculations','extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n    var completionCalculations = require('./completionCalculations');\n\n    var PageLevelProgressView = require('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressView');\n\n    var PageLevelProgressNavigationView = Backbone.View.extend({\n\n        tagName: 'button',\n\n        className: 'base page-level-progress-navigation',\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.listenTo(Adapt, 'router:location', this.updateProgressBar);\n            this.listenTo(Adapt, 'pageLevelProgress:update', this.refreshProgressBar);\n            this.listenTo(this.collection, 'change:_isComplete', this.updateProgressBar);\n            this.listenTo(this.model, 'change:_isComplete', this.updateProgressBar);\n            this.$el.attr('role', 'button');\n            this.ariaText = '';\n            \n            if (Adapt.course.has('_globals') && Adapt.course.get('_globals')._extensions && Adapt.course.get('_globals')._extensions._pageLevelProgress && Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar) {\n                this.ariaText = Adapt.course.get('_globals')._extensions._pageLevelProgress.pageLevelProgressIndicatorBar +  ' ';\n            }\n            \n            this.render();\n            \n            _.defer(_.bind(function() {\n                this.updateProgressBar();\n            }, this));\n        },\n\n        events: {\n            'click': 'onProgressClicked'\n        },\n\n        render: function() {\n            var components = this.collection.toJSON();\n            var data = {\n                components: components,\n                _globals: Adapt.course.get('_globals')\n            };            \n\n            var template = Handlebars.templates['pageLevelProgressNavigation'];\n            $('.navigation-drawer-toggle-button').after(this.$el.html(template(data)));\n            return this;\n        },\n        \n        refreshProgressBar: function() {\n            var currentPageComponents = this.model.findDescendants('components').where({'_isAvailable': true});\n            var availableChildren = completionCalculations.filterAvailableChildren(currentPageComponents);\n            var enabledProgressComponents = completionCalculations.getPageLevelProgressEnabledModels(availableChildren);\n            \n            this.collection = new Backbone.Collection(enabledProgressComponents);\n            this.updateProgressBar();\n        },\n\n        updateProgressBar: function() {\n            var completionObject = completionCalculations.calculateCompletion(this.model);\n            \n            //take all assessment, nonassessment and subprogress into percentage\n            //this allows the user to see if assessments have been passed, if assessment components can be retaken, and all other component's completion\n            \n            var completed = completionObject.nonAssessmentCompleted + completionObject.assessmentCompleted + completionObject.subProgressCompleted;\n            var total  = completionObject.nonAssessmentTotal + completionObject.assessmentTotal + completionObject.subProgressTotal;\n\n            var percentageComplete = Math.floor((completed / total)*100);\n\n\n            this.$('.page-level-progress-navigation-bar').css('width', percentageComplete + '%');\n\n            // Add percentage of completed components as an aria label attribute\n            this.$el.attr('aria-label', this.ariaText +  percentageComplete + '%');\n\n            // Set percentage of completed components to model attribute to update progress on MenuView\n            this.model.set('completedChildrenAsPercentage', percentageComplete);\n        },\n\n        onProgressClicked: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            Adapt.drawer.triggerCustomView(new PageLevelProgressView({collection: this.collection}).$el, false);\n        }\n\n    });\n\n    return PageLevelProgressNavigationView;\n\n});\n\n",
    "define('extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress',['require','coreJS/adapt','backbone','./completionCalculations','extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView','extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView'],function(require) {\n\n    var Adapt = require('coreJS/adapt');\n    var Backbone = require('backbone');\n    var completionCalculations = require('./completionCalculations');\n\n    var PageLevelProgressMenuView = require('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressMenuView');\n    var PageLevelProgressNavigationView = require('extensions/adapt-contrib-pageLevelProgress/js/PageLevelProgressNavigationView');\n\n    function setupPageLevelProgress(pageModel, enabledProgressComponents) {\n        new PageLevelProgressNavigationView({model: pageModel, collection: new Backbone.Collection(enabledProgressComponents)});\n    }\n\n    // This should add/update progress on menuView\n    Adapt.on('menuView:postRender', function(view) {\n        if (view.model.get('_id') == Adapt.location._currentId) return;\n\n        var coursePLPConfig = Adapt.course.get('_pageLevelProgress');\n\n        // do not proceed if pageLevelProgress is not enabled in course.json\n        if (!coursePLPConfig || !coursePLPConfig._isEnabled) {\n            return;\n        }\n\n        var pageLevelProgress = view.model.get('_pageLevelProgress');\n        var viewType = view.model.get('_type');\n\n        // Progress bar should not render for course viewType\n        if (viewType == 'course') return;\n\n        if (pageLevelProgress && pageLevelProgress._isEnabled) {\n            var completionObject = completionCalculations.calculateCompletion(view.model);\n\n            //take all non-assessment components and subprogress info into the percentage\n            //this allows the user to see if the assessments are passed (subprogress) and all other components are complete\n            \n            var completed = completionObject.nonAssessmentCompleted + completionObject.subProgressCompleted;\n            var total = completionObject.nonAssessmentTotal + completionObject.subProgressTotal;\n\n            var percentageComplete = Math.floor((completed / total) * 100);\n            \n            view.model.set('completedChildrenAsPercentage', percentageComplete);\n            view.$el.find('.menu-item-inner').append(new PageLevelProgressMenuView({model: view.model}).$el);\n        }\n    });\n\n    // This should add/update progress on page navigation bar\n    Adapt.on('router:page', function(pageModel) {\n        var coursePLPConfig = Adapt.course.get('_pageLevelProgress');\n        var pagePLPConfig = pageModel.get('_pageLevelProgress');\n\n        // do not proceed if pageLevelProgress is not enabled in course.json or for the content object\n        if (!coursePLPConfig || !coursePLPConfig._isEnabled || !pagePLPConfig || !pagePLPConfig._isEnabled) {\n            return;\n        }\n\n        var currentPageComponents = pageModel.findDescendants('components').where({'_isAvailable': true});\n        var availableComponents = completionCalculations.filterAvailableChildren(currentPageComponents);\n        var enabledProgressComponents = completionCalculations.getPageLevelProgressEnabledModels(availableComponents);\n\n        if (enabledProgressComponents.length > 0) {\n            setupPageLevelProgress(pageModel, enabledProgressComponents);\n        }\n    });\n\n});\n\n",
    "define('extensions/adapt-contrib-resources/js/adapt-contrib-resourcesView',['require','backbone','core/js/adapt'],function(require) {\n\n    var Backbone = require('backbone');\n    var Adapt = require('core/js/adapt');\n\n    var ResourcesView = Backbone.View.extend({\n\n        className: \"resources\",\n\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n\n        events: {\n            'click .resources-filter button': 'onFilterClicked',\n            'click .resources-item-container button': 'onResourceClicked'\n        },\n\n        render: function() {\n            var collectionData = this.collection.toJSON();\n            var modelData = this.model.toJSON();\n            var template = Handlebars.templates[\"resources\"];\n            this.$el.html(template({model: modelData, resources:collectionData, _globals: Adapt.course.get('_globals')}));\n            _.defer(_.bind(this.postRender, this));\n            return this;\n        },\n\n        postRender: function() {\n            this.listenTo(Adapt, 'drawer:triggerCustomView', this.remove);\n        },\n\n        onFilterClicked: function(event) {\n            event.preventDefault();\n            var $currentTarget = $(event.currentTarget);\n            this.$('.resources-filter button').removeClass('selected');\n            var filter = $currentTarget.addClass('selected').attr('data-filter');\n            var items = [];\n\n            if (filter === 'all') {\n                items = this.$('.resources-item').removeClass('display-none');\n            } else {\n                this.$('.resources-item').removeClass('display-none').not(\".\" + filter).addClass('display-none');\n                items = this.$('.resources-item.' + filter);\n            }\n\n            if (items.length === 0) return;\n            $(items[0]).a11y_focus();\n        },\n\n        onResourceClicked: function(event) {\n            var data = $(event.currentTarget).data();\n\n            if (data.type !== 'document') {\n                window.top.open(data.href);\n                return;\n            }\n            var dummyLink = document.createElement('a');\n            dummyLink.download = data.filename;\n            dummyLink.href = data.href;\n\n            document.body.appendChild(dummyLink);\n            dummyLink.click();\n            document.body.removeChild(dummyLink);\n            delete dummyLink;\n        }\n    });\n\n    return ResourcesView;\n});\n\n",
    "define('extensions/adapt-contrib-resources/js/adapt-contrib-resourcesHelpers',['require','handlebars'],function(require) {\n\n\tvar Handlebars = require('handlebars');\n\n\tHandlebars.registerHelper('if_collection_contains', function(collection, attribute, value, block) {\n\t\tvar makeBlockVisible = false;\n\n\t\t_.each(collection, function(resource) {\n\t\t\tif (resource[attribute] === value) {\n\t\t\t\tmakeBlockVisible = true;\n\t\t\t}\n\t\t});\n\t\tif(makeBlockVisible) {\n            return block.fn(this);\n        } else {\n            return block.inverse();\n        }\n    });\n\n    Handlebars.registerHelper('if_collection_contains_only_one_item', function(collection, attribute, block) {\n\t\tvar attributeCount = [];\n\n\t\t_.each(collection, function(resource) {\n\t\t\tvar resourceAttribute = resource[attribute];\n\t\t\tif (_.indexOf(attributeCount, resourceAttribute) === -1) {\n\t\t\t\tattributeCount.push(resourceAttribute);\n\t\t\t}\n\t\t});\n\n\t\tif (attributeCount.length <= 1) {\n\t\t\treturn block.fn(this);\n\t\t} else {\n\t\t\treturn block.inverse(this);\n\t\t}\n\n    });\n\n    Handlebars.registerHelper('return_column_layout_from_collection_length', function(collection, attribute) {\n\t\tvar attributeCount = [];\n\n\t\t_.each(collection, function(resource) {\n\t\t\tvar resourceAttribute = resource[attribute];\n\t\t\tif (_.indexOf(attributeCount, resourceAttribute) === -1) {\n\t\t\t\tattributeCount.push(resourceAttribute);\n\t\t\t}\n\t\t});\n\n\t\treturn (attributeCount.length + 1);\n\n    });\n\n})\n\t;\n",
    "define('extensions/adapt-contrib-resources/js/adapt-contrib-resources',[\n    'backbone',\n    'core/js/adapt',\n    './adapt-contrib-resourcesView',\n    './adapt-contrib-resourcesHelpers'\n], function(Backbone, Adapt, ResourcesView, ResourcesHelpers) {\n\n    function setupResources(resourcesData) {\n\n        var resourcesModel = new Backbone.Model(resourcesData);\n        var resourcesCollection = new Backbone.Collection(resourcesModel.get('_resourcesItems'));\n\n        Adapt.on('resources:showResources', function() {\n            Adapt.drawer.triggerCustomView(new ResourcesView({\n                model: resourcesModel,\n                collection: resourcesCollection\n            }).$el);\n        });\n\n    }\n\n    function initResources() {\n\n        var courseResources = Adapt.course.get('_resources');\n\n        // do not proceed until resource set on course.json\n        if (!courseResources || courseResources._isEnabled === false) return;\n\n        var drawerObject = {\n            title: courseResources.title,\n            description: courseResources.description,\n            className: 'resources-drawer'\n        };\n\n        Adapt.drawer.addItem(drawerObject, 'resources:showResources');\n\n        setupResources(courseResources);\n\n    }\n\n    Adapt.once('app:dataReady', function() {\n        initResources();\n        Adapt.on('app:languageChanged', initResources);\n    });\n\n});\n\n",
    "define('extensions/adapt-notes/js/base64',[],function () {\n    var Base64={_keyStr:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",encode:function(e){var t=\"\";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t=\"\";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9+/=]/g,\"\");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/rn/g,\"n\");var t=\"\";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t=\"\";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}\n    return Base64;\n});\n",
    "/**\n * This view displays the NoteEditor.\n * Normally this class should be a\n * Backbone component, but since I\n * want to reuse a notes editor I\n * have already coded in JQuery,\n * I'm just wrapping it into this\n * Backbone view. Since it works\n * independently from the Backbone\n * view lifecycle, it runs on\n * postRender event, when the\n * Backbone template has been loaded\n * and injected into the drawer view.\n */\ndefine('extensions/adapt-notes/js/adapt-notesView',['require','backbone','coreJS/adapt','./base64'],function(require) {\n\n    var Backbone = require('backbone');\n    var Adapt = require('coreJS/adapt');\n    var Base64 = require('./base64');\n\n    /**\n     * Initializes the notes editor component\n     * that manages the all editing and presenting\n     * of notes.\n     * @param Adapt {object} the adapt configuration\n     * @param selector {string}\n     * @constructor\n     */\n    var NotesEditor = function (Adapt,selector) {\n\n        var BASE64_PREFIX = 'data:;base64,';\n\n        /**\n         * The key in use to store notes in\n         * the browser local storage\n         * @type {string}\n         */\n        var STORAGE_KEY = ('adaptNotes-'+Adapt.config.attributes._id);\n\n        /**\n         * AdaptNotes plugin configuration object\n         * set by the course author by the authoring\n         * tool.\n         * @type {object}\n         * @private\n         */\n        var _notesExtConfig={};\n\n        /**\n         * List of notes stored on device\n         * and displayed on view\n         * @type {Array}\n         * @private\n         */\n        var _notes = [];\n\n        /**\n         * The current selected note from\n         * the user, ready to edit.\n         * @type {object}\n         * @private\n         */\n        var _note = null;\n\n        /**\n         * All view elements managed by the\n         * editor like notes list, buttons and so on\n         * @type {{noteItemTemplate: null, $main: $main, $notesList: $notesList, $noteItemTemplate: $noteItemTemplate, $noteEditor: $noteEditor, $noteTitle: $noteTitle, $noteText: $noteText, $saveBtn: $saveBtn, $deleteBtn: $deleteBtn, $cancelBtn: $cancelBtn, $newBtn: $newBtn, $exportBtn: $exportBtn, $importBtn: $importBtn, $toDocumentBtn: $toDocumentBtn, $notesCommandBar: $notesCommandBar, $search: $search, $infoMessage: $infoMessage, $fileUpload: $fileUpload}}\n         */\n        var ui = {\n            noteItemTemplate:null,\n\n            $main:function () {\n                return $(selector);\n            },\n            $notesList:function () {\n                return this.$main().find('[data-notes-list]');\n            },\n            $noteItemTemplate:function () {\n                if(!this.noteItemTemplate){\n                    this.noteItemTemplate = this.$main().find('[data-note-template]').html();\n                    this.$main().find('[data-note-template]').remove();\n                }\n\n                return $(this.noteItemTemplate);\n            },\n            $noteEditor:function () {\n                return this.$main().find('[data-note-editor]');\n            },\n            $noteTitle:function () {\n                return ui.$noteEditor().find('[data-note-title]');\n            },\n            $noteText:function () {\n                return ui.$noteEditor().find('[data-note-text]');\n            },\n            $saveBtn:function () {\n                return ui.$noteEditor().find('[data-note-save]');\n            },\n            $deleteBtn:function () {\n                return ui.$noteEditor().find('[data-note-delete]');\n            },\n            $cancelBtn:function () {\n                return ui.$noteEditor().find('[data-note-cancel]');\n            },\n            $newBtn:function () {\n                return ui.$main().find('[data-note-new]');\n            },\n            $exportBtn:function () {\n                return ui.$main().find('[data-note-export]');\n            },\n            $importBtn:function () {\n                return ui.$main().find('[data-note-import]');\n            },\n            $toDocumentBtn:function () {\n                return ui.$main().find('[data-note-to-document]');\n            },\n            $notesCommandBar:function () {\n                return ui.$main().find('[data-notes-bar]');\n            },\n            $search:function () {\n                return ui.$main().find('[data-note-search]');\n            },\n            $infoMessage:function () {\n                return ui.$main().find('[data-notes-note]');\n            },\n            $fileUpload:function () {\n                return ui.$main().find('#file-upload');\n            }\n        };\n\n\n        function constructor(){\n\n            //gets the adaptNotes config\n            _notesExtConfig = Adapt.course.get('_notes');\n\n            //checks requirements\n            if(!window.FileReader || !window.localStorage)\n            {\n                alert(_notesExtConfig.browserWarn);\n                return;\n            }\n\n            //add button listeners\n            ui.$newBtn().on('click',_stateNewNote);\n            ui.$cancelBtn().on('click',_stateList);\n            ui.$saveBtn().on('click',_onSave);\n            ui.$deleteBtn().on('click',_onDelete);\n            ui.$exportBtn().on('click',_onExport);\n            ui.$toDocumentBtn().on('click',_onExportToDocument);\n            ui.$search().on('change',_onSearch);\n            ui.$fileUpload().on('change',_onUpload);\n\n            //reads teh tmp and removes it\n            ui.$noteItemTemplate();\n\n            //default\n            ui.$exportBtn().hide();\n            ui.$toDocumentBtn().hide();\n            ui.$notesList().hide();\n\n            //creates UI, list of notes if any\n            _stateList();\n        }\n\n        /**\n         * Sets the view on state \"display notes list\".\n         * Loads the notes from local storage and renders\n         * the notes. Then updates all ui element accordingly.\n         * @private\n         */\n        function _stateList(){\n            _note = null;\n            _readData(function () {\n                ui.$noteEditor().hide();\n                ui.$noteEditor().find('form')[0].reset();\n                ui.$newBtn().show();\n                ui.$importBtn().show();\n                ui.$notesCommandBar().show();\n\n                if(_notes.length>0){\n                    ui.$exportBtn().show();\n                    ui.$toDocumentBtn().show();\n                    ui.$notesList().show();\n                    ui.$search().show();\n                    ui.$infoMessage().hide();\n\n                    _renderNotes(_notes);\n                }\n                else{\n                    ui.$exportBtn().hide();\n                    ui.$toDocumentBtn().hide();\n                    ui.$notesList().hide();\n                    ui.$search().hide();\n                    ui.$infoMessage().show();\n                }\n            });\n        }\n\n        /**\n         * Sets the view on editing state\n         * by displaying the editor form,\n         * and hiding the list of notes.\n         * @private\n         */\n        function _stateNewNote() {\n            _note = null;\n            ui.$noteEditor().show();\n            ui.$notesCommandBar().hide();\n            ui.$notesList().hide();\n        }\n\n        /**\n         * Sets the view on editing state\n         * by displaying the editor form,\n         * and hiding the list of notes.\n         * @private\n         */\n        function _stateEditNote(ev) {\n            _note = ev.data.note;\n            ui.$noteTitle().val(_note.title);\n            ui.$noteText().val(_note.text);\n\n            ui.$noteEditor().show();\n            ui.$notesCommandBar().hide();\n            ui.$notesList().hide();\n        }\n\n        /**\n         * Validates the form data and\n         * add/update the editing note.\n         * Then reload the list of notes.\n         * @private\n         */\n        function _onSave(){\n\n            var title = ui.$noteTitle().val();\n            var text = ui.$noteText().val();\n\n           if(\n               title && title.trim().length>0 &&\n               text && text.trim().length>0\n           ){\n               if(_note) //updates\n                   _notes[_note.index] = {\n                       title:ui.$noteTitle().val(),\n                       text:ui.$noteText().val()\n                   };\n               else //add new one\n                   _notes.push({\n                       id:_notes.length,\n                       title:ui.$noteTitle().val(),\n                       text:ui.$noteText().val()\n                   });\n\n               //saved, now reloads the list of notes\n               _saveData(_stateList);\n           }\n           else\n               alert(_notesExtConfig.validationWarn);\n        }\n\n        /**\n         * Deletes the current editing\n         * note from the local storage\n         * @private\n         */\n        function _onDelete() {\n            if(_note){\n                _notes.splice(_note.index,1);\n                _saveData(_stateList);\n            }\n        }\n\n        /**\n         * Converts the notes object to text\n         * string and saves it into a link\n         * url in the view. The link is set\n         * to force the download of the\n         * resource, so the string content\n         * gets downloaded by the user as\n         * a text file (backup purposes)\n         * @private\n         */\n        function _onExport() {\n            var href = ui.$exportBtn().attr('data-href');\n\n            //preserves white spaces in text\n            var content = encodeURIComponent(JSON.stringify(_notes));\n\n            href = href.replace('@content', content);\n\n            ui.$exportBtn().attr('href', href);\n        }\n\n        /**\n         * Converts the notes object to HTML\n         * code string, and saves it into a link\n         * url in the view. The link is set\n         * to force the download of the\n         * resource, so the string content\n         * gets downloaded by the user as\n         * an HTML file (for printing)\n         * @private\n         */\n        function _onExportToDocument() {\n            var href = ui.$toDocumentBtn().attr('data-href');\n\n            var content = '';\n            $(_notes).each(function (i,note) {\n                content += '<h3>'+(i+1)+'. '+note.title+'</h3>';\n                content += '<p>'+note.text+'</p><br/>';\n            });\n\n            //preserves spaces in text\n            content = encodeURIComponent(content);\n\n            href = href.replace('@content', content);\n            ui.$toDocumentBtn().attr('href', href);\n        }\n\n        /**\n         * Filters the list of notes displayed\n         * on view by the searching keys.\n         * Keys must be separated by white space,\n         * search is performed in all note fields\n         * and it is case-insensitive.\n         * @private\n         */\n        function _onSearch() {\n\n            //when keys are available runs the search\n            var searchValue = ui.$search().val();\n            if(searchValue){\n                var keys = searchValue.split(' ');\n\n                //makes a list of filtered notes\n                //and displays them instead of the\n                //original once, if the filter\n                //returns some value.\n                var results = [];\n                $(keys).each(function (i,key) {\n                    var filtered = $.grep(_notes,function (note,i) {\n                        return (\n                            note.title.toLowerCase().indexOf(key.toLowerCase())!==-1 ||\n                            note.text.toLowerCase().indexOf(key.toLowerCase())!==-1\n                        );\n                    });\n                    if(filtered && filtered.length>0)\n                        results = results.concat(filtered);\n                });\n\n                if(results.length>0)\n                    _renderNotes(results);\n            }\n            //when no keys, resets the filter\n            // and displays all notes\n            else\n                _renderNotes(_notes);\n        }\n\n        /**\n         * This function is invoked when the user\n         * requests to \"upload\" a notes backup file\n         * from the device. Any existing note will\n         * be replaced with the backup.\n         * @private\n         */\n        function _onUpload(){\n            //reads the file from user device\n            var files = ui.$fileUpload()[0].files;\n            if (files && files[0]) {\n                var reader = new FileReader();\n                reader.onload = function (e) {\n                    try{\n                        if(e.target.result && e.target.result.trim().length>0){\n                            //decodes the base64 content of the backup\n                            //updates teh notes in the local storage\n                            //and on view\n                            var content = e.target.result.replace(BASE64_PREFIX,'');\n                            content = Base64.decode(content);\n                            content = JSON.parse(content);\n                            _notes = content;\n                            _saveData(_stateList);\n                        }\n                    }\n                    catch (err){\n                        alert(_notesExtConfig.fileReadError);\n                    }\n                };\n\n                reader.readAsDataURL(files[0]);\n            }\n        }\n\n        /**\n         * Renders the list of given notes\n         * to the view template and registers\n         * an event listener on each note item\n         * to display the note editing form\n         * on selection.\n         * @param notesList {object[]}\n         * @private\n         */\n        function _renderNotes(notesList) {\n            ui.$notesList().empty();\n            $(notesList).each(function (i,note) {\n                var $noteItem = ui.$noteItemTemplate();\n                $noteItem.attr('data-notes-index', i);\n                $noteItem.find('[data-note-title]').text(note.title);\n                $noteItem.find('[data-note-text]').text(note.text);\n\n                //add custom field\n                note.index = i;\n\n                $noteItem.on('click',{note:note},_stateEditNote);\n                ui.$notesList().append($noteItem);\n            });\n        }\n\n        /**\n         * Reads notes from the browser local storage.\n         * @param callback {function}\n         * @return {function}\n         * @private\n         */\n        function _readData(callback) {\n            try{\n                var storedNotes = localStorage.getItem(STORAGE_KEY);\n                _notes = JSON.parse(storedNotes) || [];\n                return callback();\n            }\n            catch (err){\n                alert('Error reading the notes on browser storage.');\n                console.error(err);\n            }\n        }\n\n        /**\n         * Saves the notes on browser local storage.\n         * @param callback {function}\n         * @return {function}\n         * @private\n         */\n        function _saveData(callback) {\n            try{\n                localStorage.setItem(STORAGE_KEY,JSON.stringify(_notes));\n                return callback();\n            }\n            catch (err){\n                alert('Could not save notes to browser storage. Please check the storage quota.');\n                console.error(err);\n            }\n        }\n\n\n        constructor();\n    };\n\n    //acts just as a wrapper around the\n    //NoteEditor done with JQuery\n    return Backbone.View.extend({\n        className: \"adaptNotes\",\n\n        //basic ini available for all plugins\n        //like this one\n        initialize: function() {\n            this.listenTo(Adapt, 'remove', this.remove);\n            this.render();\n        },\n\n        //loads the UI template from .hbs file\n        //and renders it.\n        render: function() {\n            this.$el.html(Handlebars.templates[\"notes\"]());\n            _.defer(_.bind(this.postRender, this));\n            return this;\n        },\n\n        //Here actually make the plugin working\n        //since the NotesEditor object is the one\n        //that hosts all the logic needed.\n        postRender: function() {\n            this.listenTo(Adapt, 'drawer:triggerCustomView', this.remove);\n            NotesEditor(Adapt,('.'+this.className));\n        }\n    });\n});\n\n",
    "/**\n * This plugin registers an extension for Adapt\n * providing a notes editor to the students taking\n * the course.\n * The editor list notes, edit them and search\n * for them. Notes are stored in the browser\n * localStorage, can be exported on text file\n * on the device.\n *\n * Here is all about configuring the Adapt\n * drawer object with minimum required\n * data.\n */\ndefine('extensions/adapt-notes/js/adapt-notes',[\n    'backbone',\n    'coreJS/adapt',\n    './adapt-notesView',\n], function(Backbone, Adapt, NotesView) {\n\n    //waits for data ready to be able to access\n    //plugin configuration into the course\n    Adapt.once('app:dataReady', function() {\n\n        //reads the config of this plugin that\n        //the course author can change\n        var notesExtConfig = Adapt.course.get('_notes');\n        if(notesExtConfig._isEnabled === false) return;\n\n        //sets up the drawer with config title and description\n        //shown to the student\n        var drawerObject = {\n            title: notesExtConfig.title,\n            description: notesExtConfig.description,\n            className: 'notes-drawer'\n        };\n\n        // Syntax for adding a Drawer item\n        Adapt.drawer.addItem(drawerObject, 'adaptNotes:showContentObjects');\n\n        //registers the event listener to display\n        //the plugin custom UI into the drawer\n        //NotesView is initialized only when the\n        //drawer displays, to the view HTML is\n        //available.\n        Adapt.on('adaptNotes:showContentObjects', function() {\n            Adapt.drawer.triggerCustomView(new NotesView().$el);\n        });\n    });\n\n});\n\n",
    "define('core/js/views/menuView',[\n    'core/js/adapt',\n    'core/js/views/adaptView'\n], function(Adapt, AdaptView) {\n\n    var MenuView = AdaptView.extend({\n\n    \tclassName: function() {\n            var visible = \"visibility-hidden\";\n            if (this.model.get('_isVisible')) {\n                visible = \"\";\n            }\n    \t\treturn 'menu ' +\n            'menu-' +\n            this.model.get('_id') +\n            \" \" + this.model.get('_classes') +\n            \" \" + this.setVisibility();\n    \t},\n\n        preRender: function() {\n            this.disableAnimation = Adapt.config.has('_disableAnimation') ? Adapt.config.get('_disableAnimation') : false;\n            this.$el.css('opacity', 0);\n            this.listenTo(this.model, 'change:_isReady', this.isReady);\n        },\n\n        postRender: function() {\n        },\n\n        isReady: function() {\n            if (this.model.get('_isReady')) {\n                _.defer(_.bind(function() {\n                    $('.loading').hide();\n                    $(window).scrollTop(0);\n                    Adapt.trigger('menuView:ready', this);\n                    var styleOptions = { opacity: 1 };\n                    if (this.disableAnimation) {\n                        this.$el.css(styleOptions);\n                        $.inview();\n                    } else {\n                        this.$el.velocity(styleOptions, {\n                            duration: 'fast',\n                            complete: function() {\n                                $.inview();\n                            }\n                        });\n                    }\n                    $(window).scroll();\n                }, this));\n            }\n        }\n\n    }, {\n        type:'menu'\n    });\n\n    return MenuView;\n\n});\n\n",
    "define('menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu',[\n    'coreJS/adapt',\n    'coreViews/menuView'\n], function(Adapt, MenuView) {\n\n    var BoxMenuView = MenuView.extend({\n\n        postRender: function() {\n            var nthChild = 0;\n            this.model.getChildren().each(function(item) {\n                if (item.get('_isAvailable')) {\n                    nthChild++;\n                    item.set(\"_nthChild\", nthChild);\n                    this.$('.menu-container-inner').append(new BoxMenuItemView({model: item}).$el);\n                }\n            });\n        }\n\n    }, {\n        template: 'boxmenu'\n    });\n\n    var BoxMenuItemView = MenuView.extend({\n\n        events: {\n            'click button' : 'onClickMenuItemButton'\n        },\n\n        className: function() {\n            var nthChild = this.model.get(\"_nthChild\");\n            return [\n                'menu-item',\n                'menu-item-' + this.model.get('_id') ,\n                this.model.get('_classes'),\n                this.model.get('_isVisited') ? 'visited' : '',\n                this.model.get('_isComplete') ? 'completed' : '',\n                this.model.get('_isLocked') ? 'locked' : '',\n                'nth-child-' + nthChild,\n                nthChild % 2 === 0 ? 'nth-child-even' : 'nth-child-odd'\n            ].join(' ');\n        },\n\n        preRender: function() {\n            this.model.checkCompletionStatus();\n            this.model.checkInteractionCompletionStatus();\n        },\n\n        postRender: function() {\n            var graphic = this.model.get('_graphic');\n            if (graphic && graphic.src && graphic.src.length > 0) {\n                this.$el.imageready(_.bind(function() {\n                    this.setReadyStatus();\n                }, this));\n            } else {\n                this.setReadyStatus();\n            }\n        },\n\n        onClickMenuItemButton: function(event) {\n            if(event && event.preventDefault) event.preventDefault();\n            if(this.model.get('_isLocked')) return;\n            Backbone.history.navigate('#/id/' + this.model.get('_id'), {trigger: true});\n        }\n\n    }, {\n        template: 'boxmenu-item'\n    });\n\n    Adapt.on('router:menu', function(model) {\n\n        $('#wrapper').append(new BoxMenuView({model: model}).$el);\n\n    });\n\n});\n\n",
    "define('theme/adapt-contrib-vanilla/js/theme-block',['require','coreJS/adapt','backbone'],function(require) {\n\t\n\tvar Adapt = require('coreJS/adapt');\n\tvar Backbone = require('backbone');\n\n\tvar ThemeBlockView = Backbone.View.extend({\n\n\t\tinitialize: function() {\n\t\t\tthis.setStyles();\n\t\t\tthis.listenTo(Adapt, 'device:resize', this.setStyles);\n\t\t\tthis.listenTo(Adapt, 'remove', this.remove);\n\t\t},\n\n\t\tsetStyles: function() {\n\t\t\tthis.setBackground();\n\t\t\tthis.setMinHeight();\n\t\t\tthis.setDividerBlock();\n\t\t},\n\n\t\tsetBackground: function() {\n\t\t\tvar backgroundColor = this.model.get('_themeBlockConfig')._backgroundColor;\n\t\t\t\n\t\t\tif (backgroundColor) {\n\t\t\t\tthis.$el.addClass(backgroundColor);\n\t\t\t}\n\t\t},\n\n\t\tsetMinHeight: function() {\n\t\t\tvar minHeight = 0;\n\t\t\tvar minHeights = this.model.get('_themeBlockConfig')._minimumHeights;\n\n\t\t\tif (minHeights) {\n\n\t\t\t\tif(Adapt.device.screenSize == 'large') {\n\t\t\t\t\tminHeight = minHeights._large;\n\t\t\t\t} else if (Adapt.device.screenSize == 'medium') {\n\t\t\t\t\tminHeight = minHeights._medium;\n\t\t\t\t} else {\n\t\t\t\t\tminHeight = minHeights._small;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.$el.css({\n\t\t\t\tminHeight: minHeight + \"px\"\n\t\t\t});\n\t\t},\n\n\t\tsetDividerBlock: function() {\n\t\t\tvar dividerBlock = this.model.get('_themeBlockConfig')._isDividerBlock;\n\n\t\t\tif (dividerBlock) {\n\t\t\t\tthis.$el.addClass('divider-block');\n\t\t\t}\n\t\t}\n\t});\n\n\treturn ThemeBlockView;\n\t\n});\n\n",
    "define('theme/adapt-contrib-vanilla/js/vanilla',['require','coreJS/adapt','backbone','theme/adapt-contrib-vanilla/js/theme-block'],function(require) {\n\t\n\tvar Adapt = require('coreJS/adapt');\n\tvar Backbone = require('backbone');\n\tvar ThemeBlock = require('theme/adapt-contrib-vanilla/js/theme-block');\n\n\t// Block View\n\t// ==========\n\n\tAdapt.on('blockView:postRender', function(view) {\n\t\tvar theme = view.model.get('_theme');\n\t\t\n\t\tif (theme) {\n\t\t\tnew ThemeBlock({\n\t\t\t\tmodel: new Backbone.Model({\n\t\t\t\t\t_themeBlockConfig: theme\n\t\t\t\t}),\n\t\t\t\tel: view.$el\n\t\t\t});\n\t\t}\n\t});\n});\n\n",
    ";\ndefine(\"plugins\", [\"components/adapt-contrib-blank/js/adapt-contrib-blank\",\"components/adapt-contrib-text/js/adapt-contrib-text\",\"components/adaptInteractiveMapPlaces/js/component\",\"extensions/adapt-contrib-drawerPageNavigation/js/adapt-contrib-drawerPageNavigation\",\"extensions/adapt-contrib-languagePicker/js/adapt-languagePicker\",\"extensions/adapt-contrib-pageLevelProgress/js/adapt-contrib-pageLevelProgress\",\"extensions/adapt-contrib-resources/js/adapt-contrib-resources\",\"extensions/adapt-notes/js/adapt-notes\",\"menu/adapt-contrib-boxMenu/js/adapt-contrib-boxmenu\",\"theme/adapt-contrib-vanilla/js/vanilla\"], function(){});\n\n",
    "require([\n    'core/js/adapt',\n    'core/js/adaptCollection',\n    'core/js/startController',\n    'core/js/models/articleModel',\n    'core/js/models/blockModel',\n    'core/js/models/configModel',\n    'core/js/models/contentObjectModel',\n    'core/js/models/componentModel',\n    'core/js/models/courseModel',\n    'core/js/models/questionModel',\n    'core/js/views/navigationView',\n    'core/js/accessibility',\n    'core/js/offlineStorage',\n    'core/js/logging',\n    'core/js/device',\n    'core/js/drawer',\n    'core/js/notify',\n    'core/js/popupManager',\n    'core/js/router',\n    'core/js/models/lockingModel',\n    'core/js/helpers',\n    'plugins'\n], function (Adapt, AdaptCollection, StartController, ArticleModel, BlockModel, ConfigModel, ContentObjectModel, ComponentModel, CourseModel, QuestionModel, NavigationView) {\n\n    // Append loading template and show\n    window.Handlebars = _.extend(require(\"handlebars\"), window.Handlebars);\n\n    var template = Handlebars.templates['loading'];\n    $('#wrapper').append(template());\n\n    Adapt.config = new ConfigModel(null, {url: \"course/config.json\", reset:true});\n    Adapt.config.on({\n        'change:_activeLanguage': onLanguageChange,\n        'change:_defaultDirection': onDirectionChange\n    });\n\n    // This function is called anytime a course object is loaded\n    // Once all course files are loaded trigger events and call Adapt.initialize\n    Adapt.checkDataIsLoaded = function(newLanguage) {\n        if (Adapt.contentObjects.models.length > 0\n            && Adapt.articles.models.length > 0\n            && Adapt.blocks.models.length > 0\n            && Adapt.components.models.length > 0\n            && Adapt.course.get('_id')) {\n\n            configureInview();\n\n            mapAdaptIdsToObjects();\n\n            if (typeof Adapt.course.get('_buttons').submit !== 'undefined') {\n                // Backwards compatibility with v1.x\n                var oldButtons = Adapt.course.get('_buttons');\n                var buttons = [];\n\n                for (var key in oldButtons) {\n                    buttons['_' + key] = {\n                        buttonText: oldButtons[key],\n                        ariaLabel: oldButtons[key]\n                    };\n                }\n\n                // HACK - Append other missing values\n                buttons['_showFeedback'] = {\n                    buttonText: 'Show feedback',\n                    ariaLabel: 'Show feedback'\n                };\n\n                // Replace the existing property\n                Adapt.course.set('_buttons', buttons);\n            }\n\n            Adapt.log.debug('Firing app:dataLoaded');\n\n            try {\n                Adapt.trigger('app:dataLoaded');// Triggered to setup model connections in AdaptModel.js\n            } catch(e) {\n                Adapt.log.error('Error during app:dataLoading trigger', e);\n            }\n\n            Adapt.setupMapping();\n\n            if (!Adapt.isWaitingForPlugins()) {\n                triggerDataReady(newLanguage);\n            } else {\n                Adapt.once('plugins:ready', function() {\n                    triggerDataReady(newLanguage);\n                });\n            }\n        }\n    };\n\n    function triggerDataReady(newLanguage) {\n        if (newLanguage) {\n\n            Adapt.trigger('app:languageChanged', newLanguage);\n\n            _.defer(function() {\n                var startController = new StartController();\n                var hash = '#/';\n\n                if (startController.isEnabled()) {\n                    hash = startController.getStartHash(true);\n                }\n\n                Backbone.history.navigate(hash, { trigger: true, replace: true });\n            });\n        }\n\n        Adapt.log.debug('Firing app:dataReady');\n\n        try {\n            Adapt.trigger('app:dataReady');\n        } catch(e) {\n            Adapt.log.error('Error during app:dataReady trigger', e);\n        }\n\n        if (!Adapt.isWaitingForPlugins()) {\n            triggerInitialize();\n        } else {\n            Adapt.once('plugins:ready', triggerInitialize);\n        }\n    }\n\n    function triggerInitialize() {\n        Adapt.log.debug('Calling Adapt.initialize');\n\n        addNavigationBar();\n\n        Adapt.initialize();\n\n        Adapt.off('adaptCollection:dataLoaded courseModel:dataLoaded');\n    }\n\n    function addNavigationBar() {\n\n        var adaptConfig = Adapt.course.get(\"_navigation\");\n\n        if (adaptConfig && adaptConfig._isDefaultNavigationDisabled) {\n            Adapt.trigger(\"navigation:initialize\");\n            return;\n        }\n\n        Adapt.navigation = new NavigationView();// This should be triggered after 'app:dataReady' as plugins might want to manipulate the navigation\n\n    }\n\n    function configureInview() {\n\n        var adaptConfig = Adapt.config.get(\"_inview\");\n\n        var allowScrollOver = (adaptConfig && adaptConfig._allowScrollOver === false ? false : true);\n\n        $.inview.config({\n            allowScrollOver: allowScrollOver\n        });\n\n    }\n\n    function mapAdaptIdsToObjects () {\n        Adapt.contentObjects._byAdaptID = Adapt.contentObjects.groupBy(\"_id\");\n        Adapt.articles._byAdaptID = Adapt.articles.groupBy(\"_id\");\n        Adapt.blocks._byAdaptID = Adapt.blocks.groupBy(\"_id\");\n        Adapt.components._byAdaptID = Adapt.components.groupBy(\"_id\");\n    }\n\n    // This function is called when the config model triggers 'configModel:loadCourseData'\n    // Once the config model is loaded get the course files\n    // This enables plugins to tap in before the course files are loaded & also to change the default language\n    Adapt.loadCourseData = function(newLanguage) {\n        Adapt.on('adaptCollection:dataLoaded courseModel:dataLoaded', function() {\n            Adapt.checkDataIsLoaded(newLanguage);\n        });\n\n        // All code that needs to run before adapt starts should go here\n        var language = Adapt.config.get('_activeLanguage');\n\n        var courseFolder = \"course/\" + language +\"/\";\n\n        $('html').attr(\"lang\", language);\n\n        Adapt.course = new CourseModel(null, {url:courseFolder + \"course.json\", reset:true});\n\n        Adapt.contentObjects = new AdaptCollection(null, {\n            model: ContentObjectModel,\n            url: courseFolder +\"contentObjects.json\"\n        });\n\n        Adapt.articles = new AdaptCollection(null, {\n            model: ArticleModel,\n            url: courseFolder + \"articles.json\"\n        });\n\n        Adapt.blocks = new AdaptCollection(null, {\n            model: BlockModel,\n            url: courseFolder + \"blocks.json\"\n        });\n\n        Adapt.components = new AdaptCollection(null, {\n            model: function(json) {\n\n                //use view+model object\n                var ViewModelObject = Adapt.componentStore[json._component];\n\n                if(!ViewModelObject) {\n                    throw new Error(json._component + ' component not found. Is it installed and included?');\n                }\n\n                //if model defined for component use component model\n                if (ViewModelObject.model) {\n                    return new ViewModelObject.model(json);\n                }\n\n                var View = ViewModelObject.view || ViewModelObject;\n                //if question type use question model\n                if (View._isQuestionType) {\n                    return new QuestionModel(json);\n                }\n\n                //otherwise use component model\n                return new ComponentModel(json);\n            },\n            url: courseFolder + \"components.json\"\n        });\n    };\n\n    function onLanguageChange(model, language) {\n        Adapt.offlineStorage.set('lang', language);\n        Adapt.loadCourseData(language);\n    }\n\n    function onDirectionChange(model, direction) {\n        if (direction === 'rtl') {\n            $('html').removeClass('dir-ltr').addClass('dir-rtl');\n        } else {\n            $('html').removeClass('dir-rtl').addClass('dir-ltr');\n        }\n    }\n\n    /**\n    * Before we actually go to load the course data, we first need to check to see if a language has been set\n    * If it has we can go ahead and start loading; if it hasn't, apply the defaultLanguage from config.json\n    */\n    function onLoadCourseData() {\n        if (Adapt.config.get('_activeLanguage')) {\n            Adapt.loadCourseData();\n        } else {\n            Adapt.config.set('_activeLanguage', Adapt.config.get('_defaultLanguage'));\n        }\n    }\n\n    // Events that are triggered by the main Adapt content collections and models\n    Adapt.once('configModel:loadCourseData', onLoadCourseData);\n});\n\ndefine(\"core/js/app\", function(){});\n\n"
  ]
}